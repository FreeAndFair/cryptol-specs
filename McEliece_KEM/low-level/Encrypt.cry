module Encrypt where

import Types
import Util

//--------------------------------------------------

mov_forward : ind_t -> (ind_t, Bool)
mov_forward ind_0 = outer_loop 0 ind_0 False where
    inner_loop : _ -> _ -> ind_t -> Bool -> (ind_t, Bool)
    inner_loop j i ind found =
        if (j < (SYS_T* 2))
        then if(jval<SYS_N)
            then inner_loop (j+1) i ind' found'
            else inner_loop (j+1) i ind found
        else (ind, found)
        where
            (jval : base_t) = ind@j
            (ind' : ind_t) = update (update ind j (ind@i)) i jval
            found' = True
    outer_loop : _ -> ind_t -> Bool -> (ind_t, Bool)
    outer_loop i ind found =
        if (i < SYS_T)
        then if(found')
            then outer_loop (i+1) ind' found'
            else (ind', found')
            where
                (ind', found') = inner_loop i i ind found
        else (ind, found)

// --------------------------------------------- while for loops
loop_x i ind = if (i<SYS_T*2) then loop_x (i+1) ind' else ind
    where
    ind' = update ind i ((ind@i) && GFMASK)

// when find equal value returns true
loop_findEq : ind_t  -> _ -> Bool -> Bool
loop_findEq ind i rtn = if (i<SYS_T) then rtn' else rtn
    where
        loop_z : ind_t -> _ -> _ -> Bool
        loop_z ind i j =
            if(j<i)
            then
                if((ind@i) == (ind@j))
                then True
                else loop_z ind i (j+1)
            else False
        rtn' = if(loop_z ind i 0)
            then True
            else loop_findEq ind (i+1) rtn

// While_loop : Might consider adding a limit to the counter here
while_loop : ind_t -> ind_t
while_loop ind =
    if(loop_findEq ind_2 1 False) then ind_2 else while_loop ind_2
    where ind_2 = loop_x 0 ind


// --------------------------------------------- gen_e for loops
// implements val[j] = one << (ind[j] & 63)
loop_a : base_t -> val_t ->ind_t -> val_t
loop_a j val ind =
    if (j<SYS_T) then loop_a (j+1) val' ind else val
    where
        x = 1 << ((ind@j) && 63)
        val' = update val j x

//nested for loop
loop_c : base_t ->  val_t -> ind_t -> e_int_t -> e_int_t
loop_c i val ind e_int  =
    if(i < (SYS_N+63)/64) then e_int' else e_int
    where
    (e_int' : e_int_t) = loop_b 0 i val ind e_int
    loop_b : base_t -> base_t -> val_t -> ind_t -> e_int_t -> e_int_t
    loop_b j i val ind e_int =
        if (j<SYS_T) then loop_b (j+1) i val ind e_int' else e_int
        where
            (mask_0 : base_t) =cvt_16 (ind@j)
            (mask_1 : base_t) = i^(mask_0 >> 6)
            (mask_2 : base_t) = mask_1-1
            (mask_3 : base_t) = mask_2 >> 63
            (mask : base_t) = -1* mask_2
            (m : base_t) = e_int@i
            (n : base_t) = (val@j) && mask
            (o : base_t) = m ||  n
            (e_int' : e_int_t) = update e_int i o

// store in groups of 8
loop_d : _ ->  e_int_t -> e_pieces_t ->  e_t
loop_d i e_int e_pieces =
    if (i < (SYS_N+63)/64 - 1)
    then loop_d (i+1) e_int e_pieces'
    else join e_pieces
    where
        (x : [8]base_t) = store8 (e_pieces@i) (e_int@i)
        (e_pieces' : e_pieces_t) = update e_pieces i x

//shift each value by j and && with 0xFF
loop_e : _ -> _ -> e_int_t -> e_t -> e_t
loop_e j i e_int e =
    if (j<(SYS_N % 64)) then loop_e (j+8) i e_int e' else e
    where
        (w : base_t) = (e_int@i) >> j
        (x : base_t) = w && (cvt_16 0xFF)
        (e' : [872]base_t) = update e (j/8) x

gen_e : e_t -> e_t
gen_e e = undefined where
    (val_1 : val_t) = zero
    (ind_1 : ind_t) = zero
    (e_int_1 : e_int_t) = zero
    (ind_2 : ind_t)  = while_loop ind_1
    (val_2 : val_t) = loop_a 0 val_1 ind_2
    (e_int_2 : e_int_t) = loop_c 0 val_2 ind_2 e_int_1
    (e_pieces_1 : e_pieces_t) = groupBy `{8} e
    (e_2 : e_t) = loop_d 0 e_int_2 e_pieces_1
    (i : [16]) = (SYS_N+63)/64 - 1 //max at previous loop
    (e_3 : e_t) = loop_e 0 i e_int_2 e_2

syndrome : g_pk_t -> e_t -> g_s_t -> g_s_t
syndrome pk e s_in = s_out where
    tail = PK_NROWS % 8
    // PK_ROW_BYTES = 677
    // PK_NROWS = 1547
    pk_short = take `{1047319} pk // PK_ROW_BYTES * PK_NROWS (right size)
    pk_ptr = groupBy `{677} pk_short
    loop_c : _ -> SYS_N8_t -> SYS_N8_t
    loop_c j row =
        if (j >= SYS_N/8 - PK_ROW_BYTES)
        then loop_c (j-1) row'
        else row
        where
            a = (row @ j) << tail
            b = (row @ (j-1)) >> (8-tail)
            c = a||b
            row' = update row j c
    loop_d : _ -> base_t -> SYS_N8_t -> base_t
    loop_d j b row =
        if (j < (SYS_N/8))
        then loop_d (j+1) ((row@j) && (e@j)) row
        else b
    second_loop : _ -> g_s_t -> g_s_t
    second_loop i s =
        if (i < PK_NROWS)
        then second_loop (i+1) s_out
        else s
        where
            (row_1 : SYS_N8_t) =  zero # (pk_ptr@i)
            (row_2 : SYS_N8_t) = loop_c (SYS_N/8-1) row_1
            (d : base_t) =  (row_2@(i/8))|| (1 << (i%8))
            (row_3 : SYS_N8_t) =  update row_2 (i/8) d
            (b_0 : base_t) = loop_d 0 0 row_3
            (b_1 : base_t) = b_0 ^ (b_0>>4)
            (b_2 : base_t) = b_1 ^ (b_1>>2)
            (b_3 : base_t) = b_2 ^ (b_2>>1)
            (b_4 : base_t) = b_3 && 1
            (sval : base_t) =  (s@(i/8)) || (b_4 << (i%8))
            (s_out : g_s_t) =  update s (i/8) sval
    (s : g_s_t) = zero # (drop `{194} s_in)
    s_out = second_loop 0 s

encrypt : g_s_t -> g_pk_t -> e_t -> g_s_t
encrypt s pk e = s where
    (e' : e_t) = gen_e e
    (s : g_s_t) = syndrome pk e' s


