module Shared where

import Types
import Keccak

cvt_bit_int b = if(b) then 1 else 0
cvt_int_bit i = if(i==1) then True else False

// matrix multiplication
compute_He : H_T -> e_T -> C0_T
// also [n-k][n]f2_T -> [n]f2_T -> [n-k]f2_T
compute_He H e =
    [ cvt_int_bit (sum (f hi)) | hi <- H ]
        where f hi = [ (cvt_bit_int hij) * (cvt_bit_int ej)
                        |  ej <- e | hij <- hi]

// Define H = (I_n-k |T )
//[n-k][n][2]   = [n-k][n-k][2] :: [n-k][k][2]
compute_H : public_key_T -> H_T
compute_H T =
    [ (I i) # T@i | i <- [0..(n-k-1)]]
    where I i = (update zero i True)

compute_hash_e : Integer -> e_T -> C1_T
compute_hash_e  i e = out where
    (a: [8]) = fromInteger `{[8]} i
    (x:[inf]) = SHAKE256 ((fromInteger `{[8]} i) # e)
    (out: C1_T) = take `{256} x

compute_hash_eC
    : Integer -> e_T -> cipher_text_T -> session_key_T
compute_hash_eC  i e C = out where
    (a: [8]) = fromInteger `{[8]} i
    (x:[inf]) = SHAKE256 (a # e # C.C0 # C.C1)
    (out: session_key_T) = take `{32} x
