/*
Interface for a generic elliptic curve.

This is designed to be used in any algorithm that depends on elliptic curves.
It's supposed to be generic over the type of curve; the design tries not to
tie the user into anything specific with respect to the curve construction or
curve field.

@copyright Galois, Inc.
@author Marcella Hastings <marcella@galois.com>
*/
interface module Common::EC::ECInterface where
    /**
     * Representation of a point on the curve.
     *
     * This should be able to represent both concrete points (with an x and y
     * coordinate) and the point at infinity.
     */
    type Point : *

    /**
     * Order of the elliptic curve.
     */
    type n : #
    type constraint (fin n, prime n, n >= 1)

    /**
     * Base point for the curve.
     */
    G : Point

    /**
     * Addition of two points.
     */
    add : Point -> Point -> Point

    /**
     * Subtraction of two points.
     */
    sub : Point -> Point -> Point

    /**
     * Doubling of a point (typically, elliptic curves offer optimized
     * routines for doubling a point compared to adding it to itself).
     */
    double : Point -> Point

    /**
     * Scalar multiplication of a point by an integer.
     */
    scmul : Integer -> Point -> Point

    /**
     * Twin multiplication of two points. This is the operation
     * [c]P + [d]Q, which sometimes has an optimized routine
     * compared to doing the scalar multiplications separately.
     */
    twin_mul : Integer -> Point -> Integer -> Point -> Point

    /**
     * ECDSA requires a routine to extract the x-coordinate of the affine
     * representation of a `Point` and convert it from a field element an
     * integer mod the order of the curve (`n`). This is not defined and
     * returns `None` for the point at infinity.
     *
     * For NIST-standardized curves, this should match the conversion
     * routine in [SP-800-186] Appendix F.1.
     */
    xCoordModOrder: Point -> Option (Z n)
