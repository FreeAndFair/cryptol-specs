/*
  Copyright (c) 2018, Galois Inc.
  www.cryptol.net
*/

module Primitive::Keyless::Generator::DRBG where

import Primitive::Symmetric::Cipher::Block::AES

type keylen   = AESKeySize // bits
type blocklen = 128 // bits
type seedlen  = 256 // bits, 256 bits fixed by table 3 for AES-128
type reseed_limit = 2 ^^ 35 // max number of bytes to generate before reseeding

type blocksize = 16 // blocklen / 8
type keysize = 32 // keylen / 8
type seedsize = 48

type cipher_ctx = { key : [keylen] }

block_encrypt : [keylen] -> [blocklen] -> [blocklen]
block_encrypt key data = aesEncrypt(data, key)

type s2n_drbg =
  { bytes_used : [64]
  , ctx : cipher_ctx
  , v : [blocklen]
  }

drbg_generate_internal : {n, blocks}
                         ( fin n, fin blocks, n >= 1, n <= 8192
                         , n == blocklen * blocks)
                      => s2n_drbg
                      -> ([n], s2n_drbg)
drbg_generate_internal drbg =
  (join [ block_encrypt drbg.ctx.key (drbg.v + i) | i <- [1 .. blocks]], drbg')
    where drbg' = { bytes_used = drbg.bytes_used + `(blocks * blocksize)
                  , ctx = drbg.ctx
                  , v = drbg.v + `blocks
                  }

drbg_instantiate : {ps_size}
                   (fin ps_size)
                => [seedlen]
                -> [ps_size]
                -> s2n_drbg
drbg_instantiate entropy ps = drbg_reseed zero entropy ps'
  where
    /* pad ps with zeros if needed to reach seedlen
       otherwise truncate to seedlen */
    ps' = take `{seedlen} (ps # (zero : [seedlen]))

/* Should bytes used be reset before the update? s2n doesn't
   it seems like the NIST spec counts that update as the first

   we limit ps_size to a maximum of seedlen because this is an
   implementation specific choice made by s2n*/
drbg_reseed : {ps_size}
              (ps_size <= seedlen)
           => s2n_drbg
           -> [seedlen]
           -> [ps_size]
	   -> s2n_drbg
drbg_reseed drbg entropy ps = drbg''
  where
    drbg' = drbg_update (entropy ^ (ps # zero)) drbg
    drbg'' = { v = drbg'.v, ctx = drbg'.ctx, bytes_used = 0}

drbg_uninstantiate : s2n_drbg -> s2n_drbg
drbg_uninstantiate drbg = zero

/* This is the spec of the s2n code, in that it reseeds automatically
   if reseed is required. This is in opposition to the spec, which
   requires an error code.

   We are curious about why s2n_drbg counts a number of bytes used,
   while the spec tracks a number of calls to generate. We don't
   belive that this is buggy behavior, since if we call the maximum
   size with generate each time, we will reseed before the spec would
   require it. */
drbg_generate : {n, blocks} (fin n, fin blocks, n >= 1, n <= 8192,
                             blocks * blocklen >= n,
                             (blocks - 1) * blocklen <= n - 1) =>
                s2n_drbg -> [seedlen] -> Bit ->
                ([n], s2n_drbg)
drbg_generate drbg entropy reseed_p = (take enc_result, drbg_out)
  where
    // Re-seed if we have exceeded the limit, or if reseed_p is set
    drbg_r =
      if reseed_p \/ drbg.bytes_used + `n * 8 + `blocklen * 8 >= `reseed_limit then
        drbg_reseed drbg entropy (zero : [256])
      else drbg
    // Encrypt v+1, v+2, ..., v + ceil (n / blocklen)
    (enc_result, drbg_v) = drbg_generate_internal `{blocks=blocks} drbg_r
    // Update the drbg state
    drbg_out = drbg_update zero drbg_v

/* What is ctr_len? We think it is >= blocklen, so
   we go to the else branch of 2.1 every time */
drbg_update : [seedlen] -> s2n_drbg -> s2n_drbg
drbg_update data drbg = result
  where
    // NOTE: blocklen * seedlen / blocklen is seedlen in our case, but might be
    // different if seedlen isn't a multiple of blocklen
    type blocks = (seedlen + blocklen -1)/blocklen
    // Encrypt v+1, v+2, ..., v + ceil (seedlen / blocklen)
    (enc_result, _) = drbg_generate_internal `{blocks=blocks} drbg
    // XOR the additional input data with the first bits of enc_result
    data_xor = (take enc_result) ^ data
    // Return the first half of data_xor as the new key, and the last half of it
    // as the new value for v
    result = { bytes_used = drbg.bytes_used + (`blocks * `blocksize)
             , ctx = { key = take data_xor }
             , v = drop data_xor
             }


/* Example test vectors from

   https://csrc.nist.gov/Projects/Cryptographic-Algorithm-Validation-Program/Random-Number-Generators

   for CTR_DRBG.
*/

/* [AES-128 no df]
   [PredictionResistance = False]
   [EntropyInputLen = 256]
   [NonceLen = 0]
   [PersonalizationStringLen = 0]
   [AdditionalInputLen = 0]
   [ReturnedBitsLen = 512] <- value of type parameter n
*/



testInstantiate0 = {entropy = 0xed1e7f21ef66ea5d8e2a85b9337245445b71d6393a4eecb0e63c193d0f72f9a9,
                    pString = zero : [0],
                        Key = 0xb5fc83ef1518da3cb85598ee9795001e,
                         	V = 0x58f90cf75af84f221514db847ec007d1}

testInstantiatedrbg0 = drbg_instantiate`{ps_size=0} testInstantiate0.entropy testInstantiate0.pString

testInstantiate0Pass = testInstantiatedrbg0.v == testInstantiate0.V /\ testInstantiatedrbg0.ctx.key == testInstantiate0.Key

testReseed0 = {entropyReseed = 0x303fb519f0a4e17d6df0b6426aa0ecb2a36079bd48be47ad2a8dbfe48da3efad,
            	           Key = 0x577a79cc512258c3e255fcf3f4cf0c1a,
                        	 V = 0x531599fd616f33678192928bf771bb2b}

testReseed0Pass = drbgreseed.v == testReseed0.V /\ drbgreseed.ctx.key == testReseed0.Key
                where drbgreseed = drbg_reseed`{ps_size=0} testInstantiatedrbg0 testReseed0.entropyReseed zero

testGenerate0 = {	Key = 0xac373fb3773597b0d6cb6f37e6b59293,
                	V   = 0xcd9bf115d35c60cbf7f2ebac8e43f53b}

testGeneratedrbg0 = (drbg_generate`{n=512} testInstantiatedrbg0 testReseed0.entropyReseed True).1

testGenerate0Pass = testGeneratedrbg0.v == testGenerate0.V /\ testGeneratedrbg0.ctx.key == testGenerate0.Key

testGenerateSnd0 = {returnedBits = 0xf80111d08e874672f32f42997133a5210f7a9375e22cea70587f9cfafebe0f6a6aa2eb68e7dd9164536d53fa020fcab20f54caddfab7d6d91e5ffec1dfd8deaa,
                 	Key = 0x964c57946a104aa93fc3c2137bb9bc11,
                 	V   = 0x9d58008033ac007c9ead254bfa8de2b6}

testGenerateSnd0Pass = and [ result == testGenerateSnd0.returnedBits
                           , drbg.ctx.key == testGenerateSnd0.Key
                           , drbg.v == testGenerateSnd0.V ]
                     where (result,drbg) = drbg_generate`{n=512} testGeneratedrbg0 zero False


property testsPass = and [testInstantiate0Pass, testReseed0Pass, testGenerate0Pass, testGenerateSnd0Pass]