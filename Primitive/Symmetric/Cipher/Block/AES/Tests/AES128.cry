/**
 * Test vectors for AES128.
 * These are drawn from the NIST Cryptographic Standards and Guidelines
 * project.
 *
 * [AES128]: AES Core 128. Block Cipher Modes of Operation Electronic Codebook
 *    (ECB).
 *    @see https://csrc.nist.rip/CSRC/media/Projects/Cryptographic-Standards-and-Guidelines/documents/examples/AES_Core128.pdf
 *
 *  @copyright Galois Inc.
 *  @author Nichole Schimanski <nls@galois.com>
 *  @author Marcella Hastings <marcella@galois.com>
 *  www.cryptol.net
 */
module Primitive::Symmetric::Cipher::Block::AES::Tests::AES128 where
import Primitive::Symmetric::Cipher::Block::AES::Instantiations::AES128 as AES128

/**
 * ```repl
 * :prove aes128TestVectorsPass
 * ```
 */
property aes128TestVectorsPass = and encryptions /\ and decryptions
    where
        key = 0x2b7e151628aed2a6abf7158809cf4f3c
        pts = [
            0x6bc1bee22e409f96e93d7e117393172a,
            0xae2d8a571e03ac9c9eb76fac45af8e51,
            0x30c81c46a35ce411e5fbc1191a0a52ef,
            0xf69f2445df4f9b17ad2b417be66c3710
        ]
        expected_cts = [
            0x3ad77bb40d7a3660a89ecaf32466ef97,
            0xf5d3d58503b9699de785895a96fdbaaf,
            0x43b1cd7f598ece23881b00e3ed030688,
            0x7b0c785e27e8ad3f8223207104725dd4
        ]
        encryptions = [ AES128::encrypt key msg == ct | msg <- pts | ct <- expected_cts ]
        decryptions = [ AES128::decrypt key ct == pt | pt <- pts | ct <- expected_cts ]
