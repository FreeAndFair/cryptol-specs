// Sub-functions that compose a single round of AES.
//
// @copyright Galois Inc.
// @author Nichole Shimanski <nls@galois.com>
// @editor Brian Huffman
// @author Marcella Hastings <marcella@galois.com>
// www.cryptol.net
module Primitive::Symmetric::Cipher::Block::AES::Round where

import Common::GF28 as GF28
import Primitive::Symmetric::Cipher::Block::AES::State
import Primitive::Symmetric::Cipher::Block::AES::SBox

/**
 * One round of AES.
 * [FIPS-197u1] Section 5.3, Algorithm 1, Lines 5-8.
 */
AESRound : RoundKey -> State -> State
AESRound rk s = rk ^ MixColumns (ShiftRows (SubBytes s))

/**
 * SubBytes applies an invertible, non-linear transformation to the state.
 * [FIPS-197u1] Section 5.1.1.
 *
 * It does so by applying the AES S-box independently to each byte in the state.
 */
SubBytes : State -> State
SubBytes state = [ [ sbox @ b | b <- row ] | row <- state ]

/**
 * ShiftRows transforms the state by cycling the last three rows.
 * [FIPS-197u1] Section 5.1.2.
 */
ShiftRows : State -> State
ShiftRows state = [ row <<< i | row <- state | i : [2] <- [0 .. 3] ]

/**
 * MixColumns multiplies the state columns by a fixed matrix.
 * [FIPS-197u1] Section 5.1.3.
 */
MixColumns : State -> State
MixColumns state = GF28::matrixMult m state
    where m = [ [2,3,1,1] >>> i | i <- [0 .. 3] ]

/** The final AES round */
AESFinalRound : RoundKey -> State -> State
AESFinalRound rk s = rk ^ ShiftRows (SubBytes s)

/**
 * One inverse round of AES.
 * [FIPS-197u1] Section 5.3, Algorithm 3, Lines 5-8.
 */
AESInvRound : RoundKey -> State -> State
AESInvRound rk s = InvMixColumns (rk ^ InvSubBytes (InvShiftRows s))

/**
 * Inverts the `ShiftRows` function.
 * [FIPS-197u1] Section 5.3.1.
 */
InvShiftRows : State -> State
InvShiftRows state = [ row >>> shiftAmount | row <- state
                                           | shiftAmount : [2] <- [0 .. 3]
                     ]

/**
 * Inverts the `MixColumns` function.
 * [FIPS-197u1] Section 5.3.3.
 */
InvSubBytes : State -> State
InvSubBytes state = [ [ sboxInv @ b | b <- row ] | row <- state ]

/**
 * Inverts the `SubBytes` function.
 * [FIPS-197u1] Section 5.3.2
 */
InvMixColumns : State -> State
InvMixColumns state = GF28::matrixMult m state
    where m = [[0x0e, 0x0b, 0x0d, 0x09] >>> i | i <- [0 .. 3] ]

/** The final inverted AES round */
AESFinalInvRound : RoundKey -> State -> State
AESFinalInvRound rk s = rk ^ InvSubBytes (InvShiftRows s)

// This proves.
subBytesInverts : State -> Bool
property subBytesInverts s = InvSubBytes (SubBytes s) == s

// This proves.
shiftRowsInverts : State -> Bool
property shiftRowsInverts s = InvShiftRows (ShiftRows s) == s

// This checks (non-exhaustively).
mixColumnsInverts : State -> Bool
property mixColumnsInverts s = InvMixColumns (MixColumns s) == s
