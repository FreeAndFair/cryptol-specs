module EtM where


import Primitive::Symmetric::Cipher::Block::AES

type Nk = 8
type Nb = 4
type Key = [Nk][Nb * 8]

aesCounter : {n} (64 >= width n) => Key -> [128] -> [n] -> [n]
aesCounter k iv pt = pt ^ take stream
 where
 stream = join [join (aesEncrypt (split v) k) | v <- ivs]
 ivs    = [take `{64} iv # cnt + i | i <- [0...]]
 cnt    = drop `{back=64} iv

property aesCounterCorrect128 k iv (pt : [128]) =
  aesCounter k iv (aesCounter k iv pt) == pt

property aesCounterCorrect150 k iv (pt : [150]) =
  aesCounter k iv (aesCounter k iv pt) == pt

property aesCounterCorrect256 k iv (pt : [256]) =
  aesCounter k iv (aesCounter k iv pt) == pt

