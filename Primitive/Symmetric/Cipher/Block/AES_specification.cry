/*
   @copyright Galois, Inc.
   @author Marcella Hastings <marcella@galois.com>
   www.cryptol.net

   This provides the basic AES block cipher, abstracted over the key length.

   It operates over 128-bit blocks. To use AES with any practical application,
   use it with a mode of operation, like CTR or GCM-SIV.

*/

module Primitive::Symmetric::Cipher::Block::AES_specification where

import `Primitive::Symmetric::Cipher::Block::AES::Algorithm as AES
import `Primitive::Symmetric::Cipher::Block::AES::ExpandKey
import Primitive::Symmetric::Cipher::Block::AES::TBox

parameter
   // This constraint enforces the standard key sizes of 128, 192, and
   // 256-bits [FIPS-PUB-197 Sections 1, 5, and 6.1].
   type KeySize' : #
   type constraint (fin KeySize', KeySize' % 64 == 0, KeySize' / 64 >= 2, KeySize' / 64 <= 4)

// The AES implementation uses the `Mode` type to compute other parameters.
// The mode corresponds directly to the key size:
// Mode 0 = 128 bits; Mode 1 = 192 bits; Mode 2 = 256 bits
type Mode = (KeySize / 64) - 2

// Make `KeySize` and `BlockSize` accessible outside the module.
// This also lets us use AES as an instantiation of `CipherInterface`
type KeySize = KeySize'
type BlockSize = 128

encrypt : [KeySize] -> [BlockSize] -> [BlockSize]
encrypt k = encryptWithSchedule (expandKeyEnc k)

decrypt : [KeySize] -> [BlockSize] -> [BlockSize]
decrypt k = decryptWithSchedule (expandKeyDec k)

// This property must be true. It should be proven for each instantiation.
// With high probability, it will be extremely slow to prove and should be `:check`ed.
property aesIsCorrect k pt = decrypt k (encrypt k pt) == pt

// The following methods should not be used in general. They are public
// to support a confusing endianness issue in the implementation of
// AES-GCM-SIV.
type EncryptionKey = AES::KeySchedule Mode
type DecryptionKey = AES::KeySchedule Mode

expandKeyEnc : [KeySize] -> EncryptionKey
expandKeyEnc = expandKey`{Nk = AES::Nk Mode, Nr = AES::Nr Mode}

encryptWithSchedule : EncryptionKey -> [BlockSize] -> [BlockSize]
encryptWithSchedule = AES::encrypt params

private
   expandKeyDec : [KeySize] -> EncryptionKey
   expandKeyDec k = makeDecKey (expandKey`{Nk = AES::Nk Mode, Nr = AES::Nr Mode} k)

   // AES decryption with a specified KeySchedule
   decryptWithSchedule : DecryptionKey -> [BlockSize] -> [BlockSize]
   decryptWithSchedule = AES::decrypt params

   params = { encRound = AESRound, decRound = AESInvRound }


