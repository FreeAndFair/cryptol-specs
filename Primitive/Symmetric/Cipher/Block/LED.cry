/* Cryptol LED Implementation
   Copyright (c) 2018, Galois Inc.
   www.cryptol.net

   Author: Ajay Kumar Eeralla
   Source: "The LED Block Cipher" by Guo et. al: https://sites.google.com/site/ledblockcipher/
   LED - Light Encryption Device cipher
   block size = 64
   key size = 64 or 128
   steps s = 8 or 12
*/

module Primitive::Symmetric::Cipher::Block::LED where

type GF24 = [4]
type State = [4][4]GF24
/* 64, 128 for the keys resp.*/
type LEDKeySize64 = 64
type LEDKeySize128 = 128
type LEDBlockSize = 64
// Number of rounds 32 for 64, 48 for 128
type Rn = [6]
type steps = 8 
//type steps = 12
// Number of rounds
type Nr = steps*4

//Number of steps
type Ns = 8

// GF24 operations

gf24Add : {n} (fin n) => [n]GF24 -> GF24
gf24Add ps = sums ! 0
      where sums = [zero] # [p^s | p <- ps | s <- sums]
irreducible = <| x^^4 + x + 1 |>

// Polynomial multiplication in GF24

gf24Mult : (GF24, GF24) -> GF24
gf24Mult (x , y) = pmod (pmult x y) irreducible

// Define a power of an element in GF24

gf24Pow : (GF24, [4]) -> GF24
gf24Pow (n , k) = pow k
        where sq x = gf24Mult (x, x)
              odd x = x ! 0
              pow i = if i == 0 then 1
                      else if odd i
                           then gf24Mult(n, sq (pow (i >> 1)))
                           else sq (pow (i >> 1))

// self adding gives zero

polySelfAdd' : GF24 -> Bit
property polySelfAdd' x = x ^ x == zero


// Inverse of an element in GF24

gf24Inverse : GF24 -> GF24
gf24Inverse x = gf24Pow (x, 14)

//Dot product in GF24

gf24DotProduct : {n} (fin n) => ([n]GF24, [n]GF24) -> GF24
gf24DotProduct  (xs, ys) = gf24Add [ gf24Mult (x, y) | x <- xs
                                                     | y <- ys ]

// Vector Multiplication

gf24VectorMult : {n, m} (fin n) => ([n]GF24, [m][n]GF24) -> [m]GF24
gf24VectorMult (v, ms) = [ gf24DotProduct(v, m) | m <- ms ]

// Matrix Multiplication

gf24MatrixMult : {n, m, k} (fin m) => ([n][m]GF24, [m][k]GF24) -> [n][k]GF24
gf24MatrixMult (xss, yss) = [ gf24VectorMult(xs, yss') | xs <- xss ]
   where yss' = transpose yss
                                                       

// LED re-uses PRESENT Sbox

sbox : [16] GF24

sbox = [0xc, 0x5, 0x6, 0xb, 0x9, 0x0, 0xa, 0xd, 0x3, 0xe, 0xf, 0x8, 0x4, 0x7, 0x1, 0x2]

// Re-arrange plain text

//arrange_pt : [64]Bit -> [4][4]GF24

//Converting a 64-bit message to a State and back

msgToState : [64] -> State
msgToState msg = split (split msg)

stateToMsg : State -> [64]
stateToMsg st = join (join st)

// Split key (128-bits) in to two matrices of size 64 each
splitKey1 : [128] -> State
splitKey1  key =  msgToState(seed@0)
          where seed : [2][64]
                seed = split(key)


splitKey2 : [128] -> State
splitKey2  key =  msgToState(seed@1)
          where seed : [2][64]
                seed = split(key)
          

//AddRoundKey

AddRoundKey: (State, State) -> State
AddRoundKey (rk , s) = rk^s

//---Round Section-------


// Each round has the follwoing transformations

//round constants for 48-rounds

rcTab : [48][8]
rcTab = [0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3E, 
                    0x3D, 0x3B, 0x37, 0x2F, 0x1E, 0x3C, 0x39,
                    0x33, 0x27, 0x0E, 0x1D, 0x3A, 0x35, 0x2B,
                    0x16, 0x2C, 0x18, 0x30, 0x21, 0x02, 0x05,
                    0x0B, 0x17, 0x2E, 0x1C, 0x38, 0x31, 0x23,
                    0x06, 0x0D, 0x1B, 0x36, 0x2D, 0x1A, 0x34,
                    0x29, 0x12, 0x24, 0x08, 0x11, 0x22, 0x04]

      
// Define a matrix to add in each round

addConst64 : Rn -> State
addConst128 : Rn -> State
/* addconst function for 128bit key size */
//uncomment this for 128bit key size

addConst128 rn  = [[ 8, rcpad(rcTab, rn, [5, 4, 3]) , 0, 0], [9, rcpad(rcTab, rn, [2, 1, 0]) , 0, 0], [2, rcpad(rcTab, rn, [5, 4, 3]), 0, 0], [3, rcpad(rcTab, rn, [2, 1, 0]), 0, 0]] 

/* addconst function for 64bit key size */
//uncomment this for 64bit key size

addConst64 rn  =[[ 4, rcpad(rcTab, rn, [5, 4, 3]) , 0, 0], [5, rcpad(rcTab, rn, [2, 1, 0]) , 0, 0], [2, rcpad(rcTab, rn, [5, 4, 3]), 0, 0], [3, rcpad(rcTab, rn, [2, 1, 0]), 0, 0]] 


//padding (rc5||rc4||rc3) or (rc2||rc1||rc0)

rcpad : ([48][8], Rn, [3][3]) -> GF24
rcpad (rct, rn, indcs) = (0b0 # ((rct @ rn):[8]) !! indcs)

// Add constatns

AddConst64 : (Rn, State) -> State
AddConst64 (rn, st) = st ^ (addConst64 rn)

AddConst128 : (Rn, State) -> State
AddConst128 (rn, st) = st ^ (addConst128 rn)
                    
// SubCells

//Each nibble in the array state is replaced with PRESENT Sbox

SubCell : GF24 -> GF24
SubCell b = sbox @ b

SubCells : State -> State
SubCells state = [ [SubCell b | b <- row] | row <- state]

// Shift Rows

ShiftRows : State -> State
ShiftRows state = [ row <<< shiftAmount | row <- state
                                        | shiftAmount <- [0..3]
                  ]

//InvShiftRows

InvShiftRows : State -> State
InvShiftRows state = [ row >>> shiftAmount | row <- state
                                           | shiftAmount <- [0 .. 3]
                     ]
//MDS Matrix 
MDS : State

MDS = [ [ 0x4, 0x1, 0x2, 0x2],
            [ 0x8, 0x6, 0x5, 0x6],
            [ 0xB, 0xE, 0xA, 0x9],
            [ 0x2, 0x2, 0xF, 0xB] ]

// Replace each column vector v of state S by MDS.v

MixColumns : State -> State
MixColumns state = transpose [gf24VectorMult (row, MDS)| row <- state']
           where state' = transpose state

/*64-bit key size*/
// ONE Round

roundXform64 : (Rn, State) -> State
roundXform64 (rn, st) = MixColumns (ShiftRows( SubCells (AddConst64 (rn, st))))


//four rounds

fourRoundXform64 : ([6], State) -> State
fourRoundXform64 (stp, st) = roundXform64 ((4*stp+3), (roundXform64 ((4*stp+2), (roundXform64 ((4*stp+1), (roundXform64 ((4*stp+0), st)))))))

/*128-bit key size */

// ONE Round

roundXform128 : (Rn, State) -> State
roundXform128 (rn, st) = MixColumns (ShiftRows( SubCells (AddConst128 (rn, st))))


//four rounds

fourRoundXform128 : ([6], State) -> State
fourRoundXform128 (stp, st) = roundXform128 ((4*stp+3), (roundXform128 ((4*stp+2), (roundXform128 ((4*stp+1), (roundXform128 ((4*stp+0), st)))))))


// LED Encryption
                       
//Encryption with the keysize of 64bits

ledEncrypt64 : ([LEDKeySize64], [LEDBlockSize])  -> [LEDBlockSize]
ledEncrypt64 (key, pt) = stateToMsg(addrk8)
              where pt_st = msgToState(pt)
                    key_st1 =  msgToState(key)
                    key_st2 = msgToState(key)
                    addrk0 = (AddRoundKey(pt_st, key_st1))
                    step0 = (fourRoundXform64 (0, addrk0))        
                    addrk1 = (AddRoundKey(step0, key_st2))
                    step1 = (fourRoundXform64 (1, addrk1))
                    addrk2 = (AddRoundKey(step1, key_st1))
                    step2 = (fourRoundXform64 (2, addrk2))
                    addrk3 = (AddRoundKey(step2, key_st2))
                    step3 = (fourRoundXform64 (3, addrk3))
                    addrk4 = (AddRoundKey(step3, key_st1))
                    step4 = (fourRoundXform64 (4, addrk4))
                    addrk5 = (AddRoundKey(step4, key_st2))
                    step5 = (fourRoundXform64 (5, addrk5))
                    addrk6 = (AddRoundKey(step5, key_st1))
                    step6 = (fourRoundXform64 (6, addrk6))
                    addrk7 = (AddRoundKey(step6, key_st2))
                    step7 = (fourRoundXform64 (7, addrk7))
                    addrk8 = (AddRoundKey(step7, key_st1))

                   
// Encryption with the keysize of 128bits

ledEncrypt128 : ([LEDKeySize128], [LEDBlockSize])  -> [LEDBlockSize]
ledEncrypt128 ( key, pt) = stateToMsg(addrk12)
              where pt_st = msgToState(pt)
                    /* splitting the key in two with 64bits each*/
                    key_st1 = splitKey1(key)
                    key_st2 = splitKey2(key)
                    addrk0 = (AddRoundKey(pt_st, key_st1))
                    step0 = (fourRoundXform128 (0, addrk0))        
                    addrk1 = (AddRoundKey(step0, key_st2))
                    step1 = (fourRoundXform128 (1, addrk1))
                    addrk2 = (AddRoundKey(step1, key_st1))
                    step2 = (fourRoundXform128 (2, addrk2))
                    addrk3 = (AddRoundKey(step2, key_st2))
                    step3 = (fourRoundXform128 (3, addrk3))
                    addrk4 = (AddRoundKey(step3, key_st1))
                    step4 = (fourRoundXform128 (4, addrk4))
                    addrk5 = (AddRoundKey(step4, key_st2))
                    step5 = (fourRoundXform128 (5, addrk5))
                    addrk6 = (AddRoundKey(step5, key_st1))
                    step6 = (fourRoundXform128 (6, addrk6))
                    addrk7 = (AddRoundKey(step6, key_st2))
                    step7 = (fourRoundXform128 (7, addrk7))
                    addrk8 = (AddRoundKey(step7, key_st1))
                    step8 = (fourRoundXform128 (8, addrk8))
                    addrk9 = (AddRoundKey(step8, key_st2))
                    step9 = (fourRoundXform128 (9, addrk9))
                    addrk10 = (AddRoundKey(step9, key_st1))
                    step10 = (fourRoundXform128 (10, addrk10))
                    addrk11 = (AddRoundKey(step10, key_st2))
                    step11 = (fourRoundXform128 (11, addrk11))
                    addrk12 = (AddRoundKey(step11, key_st1))

// Helper to run the experiments


ledEncrypt64' : ([LEDBlockSize], [LEDBlockSize]) -> [LEDBlockSize]
ledEncrypt64' (key, pt) = ledEncrypt128 (key#zero, pt)

ledEncrypt128' : ([LEDKeySize128], [LEDKeySize128]) -> [LEDKeySize128]
ledEncrypt128' (key, pt) = ledEncrypt128(key, (take`{64} pt))# zero


// Testing

tests = [test64_1, test64_2, test128_1, test128_2]
property testsPass = and tests

//Keysize: 64bits

property test64_1  = ledEncrypt64 (zero, zero) == 0x39c2401003a0c798
property test64_2 = ledEncrypt64 (0x0123456789abcdef, 0x0123456789abcdef) == 0xa003551e3893fc58

//keysize: 128bits

property test128_1 = ledEncrypt128 (zero, zero) == 0x3decb2a0850cdba1
property test128_2 = ledEncrypt128 (0x0123456789abcdef0123456789abcdef, 0x0123456789abcdef) == 0xd6b824587f014fc2
