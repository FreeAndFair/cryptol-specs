/**
 * ML-KEM cipher with a fast NTT implementation.
 *
 * @copyright Galois, Inc
 * @author Marios Georgiou <marios@galois.com>
 * @editor Marcella Hastings <marcella@galois.com>
 *
 * @copyright Amazon.com or its affiliates.
 * @author Rod Chapman <rodchap@amazon.com>
 *
 * Sources:
 * [FIPS-203]: National Institute of Standards and Technology. Module-Lattice-
 *     Based Key-Encapsulation Mechanism Standard. (Department of Commerce,
 *     Washington, D.C.), Federal Information Processing Standards Publication
 *     (FIPS) NIST FIPS 203. August 2024.
 *     @see https://doi.org/10.6028/NIST.FIPS.203
 */
module Primitive::Asymmetric::Cipher::ML_KEM::Specification where

import Primitive::Keyless::Hash::SHAKE::SHAKE256 as SHAKE256
import Primitive::Keyless::Hash::SHAKE::SHAKE128 as SHAKE128
import Primitive::Keyless::Hash::SHA3::SHA3_256 as SHA3_256
import Primitive::Keyless::Hash::SHA3::SHA3_512 as SHA3_512

/*
 * [FIPS-203] Section 2.3.
 */
type n = 256
/*
 * [FIPS-203] Section 2.3.
 */
type q = 3329
/**
 * A primitive n-th root of unity modulo `q`.
 * [FIPS-203] Section 2.3.
 */
zeta = 17 : Z q
/*
 * Defines the set {0, 1, ..., 255} of unsigned 8-bit integers.
 * [FIPS-203] Section 2.3.
 */
type Byte = [8]

/*
 * Representation of an element in the ring `R_q` or in `T_q`.
 *
 * `R_q` is the ring `Z_q [X] / (X^n + 1)` with ring operations
 * addition and multiplication modulo `X^n + 1`.
 *
 * [FIPS-203] Section 2.3 (definition of the ring).
 * [FIPS-203] Section 2.4.4, Equation 2.5 (definition of the representation of
 *     elements in the ring).
 *
 * `T_q` is the image of `R_q` under the number-theoretic transform. An
 * element of `T_q` is the "NTT representation" of a polynomial in `R_q`.
 *
 * [FIPS-203] Section 2.3 (definition of the `T_q`).
 * [FIPS-203] Section 2.4.4 Equation 2.7 (definition of the representation of
 *     an element in `T_q`).

 * Z is a Cryptol primitive such that Z q represents integers mod q that are
 * closed under arithmetic operations
 */
type Z_q_256 = [n](Z q)

/**
 * An element in the ring `R_q`.
 *
 * An element in the ring is a polynomial of degree at most 255 (e.g. with 256
 * terms). The `i`th element in this array represents the coefficient of the
 * degree-`i` term.
 *
 * [FIPS-203] Section 2.3 (definition of the ring).
 * [FIPS-203] Section 2.4.4, Equation 2.5 (definition of the representation of
 *     elements in the ring).
 */
type Rq = [n](Z q)

/**
 * An element in the ring `T_q`.
 *
 * An element in this ring (sometimes called the "NTT representation") is a
 * tuple of 128 polynomials, each of degree at most one (e.g. with two terms).
 * The `2i` and `2i+1`th terms in this array represent the degree-0 and
 * degree-1 coefficients of the `i`th polynomial, respectively.
 *
 * [FIPS-203] Section 2.3 (definition of the `T_q`).
 * [FIPS-203] Section 2.4.4 Equation 2.7 (definition of the representation of
 *     an element in `T_q`).
 */
type Tq = [n](Z q)

/**
 * Pseudorandom function (PRF).
 * [FIPS-203] Section 4.1, Equations 4.2 and 4.3.
 *
 * The SHA3 API operates over bit streams; the `groupBy` and `join` calls
 * convert to and from our byte arrays.
 */
PRF : {eta} (2 <= eta, eta <= 3) => [32]Byte -> Byte -> [64 * eta]Byte
PRF s b = groupBy`{8} (SHAKE256::xof (join s # b))

/**
 * One of the hash functions used in the protocol.
 * [FIPS-203] Section 4.1, Equation 4.4.
 *
 * The SHA3 API operates over bit streams; the `groupBy` and `join` calls
 * convert to and from our byte arrays.
 */
H : {hinl} (fin hinl) => [hinl]Byte -> [32]Byte
H M = groupBy (SHA3_256::hash (join M))

/**
 * One of the hash functions used in the protocol.
 * [FIPS-203] Section 4.1, Equation 4.4.
 *
 * The SHA3 API operates over bit streams; the `groupBy` and `join` calls
 * convert to and from our byte arrays.
 */
J : {hinl} (fin hinl) => [hinl]Byte -> [32]Byte
J s = groupBy (SHAKE256::xof (join s))

/**
 * One of the hash functions used in the protocol.
 * [FIPS-203] Section 4.1, Equation 4.5.
 *
 * The SHA3 API operates over bit streams; the `groupBy` and `join` calls
 * convert to and from our byte arrays.
 */
G : {ginl} (fin ginl) => [ginl]Byte -> ([32]Byte, [32]Byte)
G M = (a, b) where
    [a, b] = split`{2} (groupBy`{8} (SHA3_512::hash (join M)))

/**
 * eXtendable-Output Function (XOF) wrapper.
 * [FIPS-203] Section 4.1, Equation 4.6.
 *
 * The SHA3 API operates over bit streams; the `groupBy` and `join` calls
 * convert to and from our byte arrays.
 */
XOF : ([34]Byte) -> [inf]Byte
XOF(d) = groupBy (SHAKE128::xof (join d))

/**
 * Conversion from bit arrays to byte arrays.
 * [FIPS-203] Section 4.2.1, Algorithm 3.
 */
BitsToBytes : {ell} (fin ell, ell > 0) => [ell*8]Bit -> [ell]Byte
BitsToBytes input = map reverse (groupBy input)

/**
 * Conversion from byte arrays to bit arrays.
 * [FIPS-203] Section 4.2.1, Algorithm 4.
 */
BytesToBits : {ell} (fin ell, ell > 0) => [ell]Byte -> [ell*8]Bit
BytesToBits input = join (map reverse input)

BitToZ : Bit -> Z q
BitToZ b = if b then 1 else 0

BitstoZ : {ell} (fin ell, ell > 0) => [ell] -> (Z q)
BitstoZ betas = fromInteger (toInteger (reverse betas))

ZtoBits : {ell} (fin ell, ell > 0) => (Z q) -> [ell]
ZtoBits fi = reverse (fromInteger (fromZ fi))

// In Cryptol, rounding is computed via the built-in function roundAway
property rounding = ((roundAway(1.5) == 2) && (roundAway(1.4) == 1))

/**
 * Compression from an integer mod `q` to an integer mod `2^d`.
 * [FIPS-203] Section 4.2.1, Equation 4.7.
 */
Compress'' : {d} (d < lg2 q) => Z q -> [d]
Compress'' x = fromInteger(roundAway(((2^^`d)/.`q) * fromInteger(fromZ(x))) % 2^^`d)

/**
 * Decompression from an integer mod `2^d` to an integer mod `q`.
 * [FIPS-203] Section 4.2.1, Equation 4.8.
 */
Decompress'' : {d} (d < lg2 q) => [d] -> Z q
Decompress'' x = fromInteger(roundAway(((`q)/.(2^^`d))*fromInteger(toInteger(x))))

/**
 * When `d` is large, compression followed by decompression must not
 * significantly alter the value.
 * [FIPS-203] Section 4.2.1, "Compression and Decompression".
 */
CorrectnessCompress : Z q -> Bit
property CorrectnessCompress x = err <= B_q`{d_u} where
    x' = Decompress''`{d_u}(Compress''`{d_u}(x))
    err = abs(modpm(x'-x))

    B_q : {d} (d < lg2 q) => Integer
    B_q = roundAway((`q/.(2^^(`d+1))))

    modpm : {alpha} (fin alpha, alpha > 0) => Z alpha -> Integer
    modpm r = if r' > (`alpha / 2) then r' - `alpha else r'
          where r' = fromZ(r)

/**
 * Compression applied to a vector is equivalent to applying compression to
 * each individual element.
 * [FIPS-203] Section 2.4.8, Equation 2.15.
 */
Compress' : {d} (d < lg2 q) => Z_q_256 -> [n][d]
Compress' x = map Compress''`{d} x

/**
 * Decompression applied to a vector is equivalent to applying decompression to
 * each individual element.
 * [FIPS-203] Section 2.4.8.
 */
Decompress' : {d} (d < lg2 q) => [n][d] -> Z_q_256
Decompress' x = map Decompress''`{d} x

/**
 * Compression applied to an array is equivalent to applying compression to
 * each individual element.
 * [FIPS-203] Section 2.4.8.
 */
Compress : {d, k1} (d < lg2 q, fin k1) => [k1]Z_q_256 -> [k1][n][d]
Compress x = map Compress'`{d} x

/**
 * Decompression applied to an array is equivalent to applying decompression to
 * each individual element.
 * [FIPS-203] Section 2.4.8.
 */
Decompress : {d, k1} (d < lg2 q, fin k1) => [k1][n][d] -> [k1]Z_q_256
Decompress x = map Decompress'`{d} x

/*
 * We make this trivial serialization explicit, since it is not an identity in Cryptol.
 * Byte encoding and decoding involves regrouping 8-bit arrays into ell-bit arrays.
 */
regroup B = reverse (groupBy (join (reverse B)))

/**
 * This is used in some places where the `ByteEncode` function is required in
 * the spec. It looks like a 2D version of it?
 */
EncodeBytes' : {ell, c} (fin ell, ell > 0, fin c) => [c * 8][ell] -> [c * ell]Byte
EncodeBytes' = regroup

/**
 * This is used in some places where the `ByteDecode` function is required in
 * the spec. It looks like a 3D version of it?
 */
DecodeBytes' : {ell, c} (fin ell, ell > 0, fin c) => [c * ell]Byte -> [c * 8][ell]
DecodeBytes' = regroup

/**
 * Encoding and decoding bytes must be inverses in 2D.
 * ```repl
 * :prove CorrectnessEncodeBytes'
 * ```
 */
CorrectnessEncodeBytes' : [n][2] -> Bit
property CorrectnessEncodeBytes' B = DecodeBytes'(EncodeBytes' B) == B

/**
 * This is used in some places where the `ByteEncode` function is required in
 * the spec. It's a 3D version of `EncodeBytes'`.
 */
EncodeBytes : {ell, k1, c} (fin ell, ell > 0, fin k1, fin c) =>
    [k1][c * 8][ell] -> [c * ell * k1]Byte
EncodeBytes B = EncodeBytes' (join B)

/**
 * This is used in some places where the `ByteDecode` function is required in
 * the spec. It's a 3D version of `DecodeBytes'`.
 */
DecodeBytes : {ell, k1, c} (fin ell, ell > 0, fin k1, fin c) =>
    [c * ell * k1]Byte -> [k1][c * 8][ell]
DecodeBytes B = groupBy (DecodeBytes' B)

/**
 * Encoding and decoding bytes must be inverses in 3D.
 * ```repl
 * :prove CorrectnessEncodeBytes
 * ```
 */
CorrectnessEncodeBytes : [k][n][2] -> Bit
property CorrectnessEncodeBytes B = DecodeBytes(EncodeBytes B) == B

/**
 * Apply encoding to a vector applying `Encode` to each element, then
 * concatenating the results.
 * [FIPS-203] Section 2.4.8.
 */
Encode : {ell, k1} (fin ell, ell > 0, fin k1) => [k1]Z_q_256 -> [32 * ell * k1]Byte
Encode fVec = join (map Encode'`{ell} fVec)

/**
 * Apply decoding to a vector by splitting the vector into appropriately-sized
 * components and applying `Decode` to each element.
 * [FIPS-203] Section 2.4.8.
 */
Decode : {ell, k1} (fin ell, ell > 0, fin k1) => [32 * ell * k1]Byte -> [k1]Z_q_256
Decode BVec = map Decode'`{ell} (split BVec)

/**
 * Encode and decode must be inverses in 2D.
 * ```repl
 * :check CorrectnessEncodeDecode
 * ```
 */
CorrectnessEncodeDecode : [k]Z_q_256 -> Bit
property CorrectnessEncodeDecode fVec = all CorrectnessEncodeDecode' fVec

/**
 * Decode a byte array into an array of `d`-bit integers.
 * [FIPS-203] Section 4.2.1, Algorithm 6.
 */
DecodeSpec : {ell} (fin ell, ell > 0) => [32 * ell]Byte -> Z_q_256
DecodeSpec B = [f i | i <- [0 .. 255]]
    where betas = BytesToBits B : [256 * ell]
          f i = sum [ BitToZ (betas@(i*`ell+j))*fromInteger(2^^j)
                    | j <- [0 .. (ell-1)]]

/**
 * Decode a byte array into an array of `d`-bit integers, more efficiently than
 * the version in the spec.
 */
Decode' : {ell} (fin ell, ell > 0) => [32 * ell]Byte -> Z_q_256
Decode' B = map BitstoZ`{ell} (split (BytesToBits B))

/**
 * Proof that the efficient decode function is the same as the spec version.
 * ```repl
 * :check DecodeEquiv
 * ```
 */
DecodeEquiv : [32 * 12]Byte -> Bit
property DecodeEquiv B = (Decode' B == DecodeSpec B)

/**
 * Encode an array of `d`-bit integers into a byte array, more efficiently than
 * the version in the spec.
 *
 * This should be equivalent to [FIPS-203] Section 4.2.1, Algorithm 5.
 */
Encode' : {ell} (fin ell, ell > 0) => Z_q_256 -> [32 * ell]Byte
Encode' f = BitsToBytes (join (map ZtoBits`{ell} f))

/**
 * Decoding must be the inverse of encoding.
 * [FIPS-203] Section 4.2.1, "Encoding and decoding."
 * ```repl
 * :check CorrectnessEncodeDecode'
 * ```
 */
CorrectnessEncodeDecode' : Z_q_256 -> Bit
property CorrectnessEncodeDecode' f = Decode'`{12}(Encode'`{12} f) == f

/**
 * Uniformly sample NTT representations.
 *
 * This uses a seed `B` to generate a pseudorandom stream, which is parsed into
 * a polynomial in `T_q` drawn from a distribution indistinguishable from the
 * uniform distribution.
 *
 * [FIPS-203] Section 4.2.2, Algorithm 7.
 */
SampleNTT : [34]Byte -> Tq
SampleNTT B = a_hat' where
    // Steps 1-2, 5.
    // We (lazily) take an infinite stream from the XOF and remove only as
    // many bytes as are needed to compute the function. See [FIPS-203]
    // Section 4.1 Equation 4.6 for a discussion of the equivalence of this
    // form to the one in Algorithm 7.
    ctx0 = XOF B

    // Step 3. Since Cryptol is not imperative, we implement this loop using
    // recursion. The `j` counter is not made explicit; instead we lazily
    // generate an infinite stream of coefficients in `T_q` and `take` the
    // correct length in the next line.

    // Step 4-16. `take` fulfills the `j < 256` condition in Steps 4 and 12.
    a_hat = take`{256} (filter ctx0)

    // `filter` parses an infinite stream from the XOF, computing
    // potential elements `d1` and `d2` from the first 3 bytes in the stream
    // and adding them to the output if they are valid elements in `Z q`.
    filter: [inf]Byte -> [inf][12]
    filter XOFSqueeze = a_hat_j where
        // Step 5.
        (C # ctx) = XOFSqueeze

        // The conversion from 8-bit to 12-bit vectors (with the same value!)
        // is implicit in the spec -- see notes on Step 5 and 6/7. In Cryptol,
        // we need to convert manually to do the subsequent computations.
        [C0, C1, C2] = map zext`{12} C

        // Step 6.
        d1 = C0 + 256 * (C1 % 16)

        // Step 7. Cryptol uses integer division; it always takes the floor of
        // the result.
        d2 = (C1 / 16) + 16 * C2

        // Steps 4, 8 - 15.
        // Add `d1` and/or `d2` to the sampled vector `a_hat` if they are valid
        // elements in `Z q`.
        // The `while` loop in Step 4 is equivalent to the recursive call to
        // `filter` in each condition.
        a_hat_j = if (d1 < `q) && (d2 < `q) then
                [d1, d2] # filter ctx
            else if d1 < `q then
                [d1] # filter ctx
            else if d2 < `q then
                [d2] # filter ctx
            else filter ctx

    // This conversion is implicit in the implementation -- see the notes on
    // Step 6/7 and 9.
    toZq : [12] -> Z q
    toZq x = fromInteger (toInteger x)

    a_hat' = map toZq a_hat

/**
 * Sample a special, centered distribution of polynomials in `R_q` with small
 * coefficients.
 *
 * The input stream `B` must be uniformly random bytes!
 *
 * [FIPS-203] Section 4.2.2, Algorithm 8.
 */
SamplePolyCBD: {eta} (2 <= eta, eta <= 3) => [64 * eta]Byte -> Rq
SamplePolyCBD B = f where
    // Step 1.
    b = BytesToBits B
    // This conversion is implicit in the implementation. Convert each bit into
    // an element of Z q.
    b' = map BitToZ b

    // Step 3.
    x i = sum [b'@(2 * i * `eta + j) | j <- [0 .. (eta-1)]]
    // Step 4.
    y i = sum [b'@(2 * i * `eta + `eta + j) | j <- [0 .. (eta-1)]]

    // Steps 2, 5. The `mod q` is not explicit here because `x` and `y`
    // return elements of `Z q`.
    f = [(x i) - (y i) | i <- [0 .. 255]]

/**
 * [FIPS-203] Section 4.3 "The mathematical structure of the NTT."
 * ```repl
 * :prove QisCorrectlyDefined
 * ```
 */
QisCorrectlyDefined: Bit
property QisCorrectlyDefined = `q == 2^^8 * 13 + 1

/**
 * `zeta` is a primitive 256-th root of unity modulo `q`.
 * [FIPS-203] Section 4.3 "The mathematical structure of the NTT."
 *
 * ```repl
 * :prove zetaIsPrimitiveRoot
 * ```
 */
property zetaIsPrimitiveRoot = zeta ^^ 128 == -1

/**
 * Proves that `zeta` is correctly set to be the 256th root of `q`.
 * ```repl
 * :exhaust Is256thRootOfq
 * ```
 */
Is256thRootOfq : [lg2 q] -> Bit
property Is256thRootOfq p = (p == 0) || (p >= 256) || (zeta^^p != 1)

/**
 * Reverse the unsigned 7-bit value corresponding to an input integer in
 * `[0, ..., 127]`.
 * [FIPS-203] Section 4.3 "The mathematical structure of the NTT."
 */
BitRev7 : [8] -> [8]
BitRev7 = reverse


/**
 * This section specifies the number-theoretic transform (NTT).
 *
 * It includes the version from [FIPS-203] Section 4.3 as well
 * as a faster O(N log N) version, and a proof of their equivalence.
 *
 * This is explicitly allowed by the spec: "For every computational procedure
 * [...] a conforming implementation may replace the given set of steps with
 * any mathematically equivalent set of steps". The equivalence properties
 * prove mathematical equivalence.
 * [FIPS-203] Introduction, "7. Implementations".
 */
import submodule NTT
submodule NTT where
    private
        /**
         * Compute the NTT representation of the polynomial `f`.
         *
         * This roughly corresponds to [FIPS-203] Section 4.3, Algorithm 9.
         */
        ParametricNTT : Rq -> (Z q) -> Tq
        ParametricNTT f root = join[[f2i i, f2iPlus1 i] | i <- [0 .. 127]]
          where f2i i      = sum [f@(2*j)   * root ^^ ((2*(BitRev7 i >> 1)+1)*j) | j <- [0 .. 127]]
                f2iPlus1 i = sum [f@(2*j+1) * root ^^ ((2*(BitRev7 i >> 1)+1)*j) | j <- [0 .. 127]]

        /**
         * Compute most of the polynomial that corresponds to the NTT representation
         * `f`.
         * (The last step 14 is in a separate function)
         *
         * This roughly corresponds to [FIPS-203] Section 4.3, Algorithm 10.
         */
        ParametricNTTInv : Tq -> (Z q) -> Rq
        ParametricNTTInv f root = join[[f2i i, f2iPlus1 i] | i <- [0 .. 127]]
          where f2i i      = sum [f@(2*j)   * root ^^ ((2*(BitRev7 j >> 1)+1)*i) | j <- [0 .. 127]]
                f2iPlus1 i = sum [f@(2*j+1) * root ^^ ((2*(BitRev7 j >> 1)+1)*i) | j <- [0 .. 127]]

        /**
         * Number theoretic transform: converts elements in `R_q` to `T_q`.
         *
         * This roughly corresponds to [FIPS-203] Section 4.3, Algorithm 9.
         */
        NaiveNTT : Rq -> Tq
        NaiveNTT f = ParametricNTT f zeta

        /**
         * Inverse of the number theoretic transform: converts elements in `T_q` to
         * `R_q`.
         *
         * This roughly corresponds to [FIPS-203] Section 4.3, Algorithm 10.
         */
        NaiveNTTInv : Tq -> Rq
        NaiveNTTInv f = [term*(recip 128) | term <- ParametricNTTInv f (recip zeta)]

        //////////////////////////////////////////////////////////////
        // This section specifies fast O(N log N) NTT and Inverse NTT
        //
        // A readable explanation of the derivation of this form of
        // the NTT is in "A Complete Beginner Guide to the Number
        // Theoretic Transform (NTT)" by Ardianto Satriawan,
        // Rella Mareta, and Hanho Lee. Available from:
        //    https://eprint.iacr.org/2024/585
        //
        // This section Copyright Amazon.com, Inc. or its affiliates.
        //////////////////////////////////////////////////////////////

        // Simple lookup table for Zeta value given K
        zeta_expc  : [128](Z q)
        zeta_expc = [ 1, 1729, 2580, 3289, 2642, 630, 1897, 848,
                      1062, 1919, 193, 797, 2786, 3260, 569, 1746,
                      296, 2447, 1339, 1476, 3046, 56, 2240, 1333,
                      1426, 2094, 535, 2882, 2393, 2879, 1974, 821,
                      289, 331, 3253, 1756, 1197, 2304, 2277, 2055,
                      650, 1977, 2513, 632, 2865, 33, 1320, 1915,
                      2319, 1435, 807, 452, 1438, 2868, 1534, 2402,
                      2647, 2617, 1481, 648, 2474, 3110, 1227, 910,
                      17, 2761, 583, 2649, 1637, 723, 2288, 1100,
                      1409, 2662, 3281, 233, 756, 2156, 3015, 3050,
                      1703, 1651, 2789, 1789, 1847, 952, 1461, 2687,
                      939, 2308, 2437, 2388, 733, 2337, 268, 641,
                      1584, 2298, 2037, 3220, 375, 2549, 2090, 1645,
                      1063, 319, 2773, 757, 2099, 561, 2466, 2594,
                      2804, 1092, 403, 1026, 1143, 2150, 2775, 886,
                      1722, 1212, 1874, 1029, 2110, 2935, 885, 2154 ]

        // Fast recursive CT-NTT
        ct_butterfly :
            {m, hm}
            (m >= 2, m <= 8, hm >= 1, hm <= 7, hm == m - 1) =>
            [2^^m](Z q) -> (Z q) -> [2^^m](Z q)
        ct_butterfly v z = new_v
          where
            halflen = 2^^`hm
            lower, upper : [2^^hm](Z q)
            lower@x = v@x + z * v@(x + halflen)
            upper@x = v@x - z * v@(x + halflen)
            new_v = lower # upper

        fast_nttl :
            {lv}  // Length of v is a member of {256,128,64,32,16,8,4}
            (lv >= 2, lv <= 8) =>
            [2^^lv](Z q) -> [8] -> [2^^lv](Z q)
        fast_nttl v k
          // Base case. lv==2 so just compute the butterfly and return
          | lv == 2 => ct_butterfly`{lv,lv-1} v (zeta_expc@k)

          // Recursive case. Butterfly what we have, then recurse on each half,
          // concatenate the results and return.
          | lv  > 2 => (fast_nttl`{lv-1} s0 (k * 2)) #
                       (fast_nttl`{lv-1} s1 (k * 2 + 1))
                        where
                          t = ct_butterfly`{lv,lv-1} v (zeta_expc@k)
                          // Split t into two halves s0 and s1
                          [s0, s1] = split t

        // Top level entry point - start with lv=256, k=1
        fast_ntt : Rq -> Tq
        fast_ntt v = fast_nttl v 1

        // Fast recursive GS-Inverse-NTT
        gs_butterfly :
            {m, hm}
            (m >= 2, m <= 8, hm >= 1, hm <= 7, hm == m - 1) =>
            [2^^m](Z q) -> (Z q) -> [2^^m](Z q)
        gs_butterfly v z = new_v
          where
            halflen = 2^^`hm
            lower, upper : [2^^hm](Z q)
            lower@x = v@x  + v@(x + halflen)
            upper@x = z * (v@(x + halflen) - v@x)
            new_v = lower # upper

        fast_invnttl :
            {lv}  // Length of v is a member of {256,128,64,32,16,8,4}
            (lv >= 2, lv <= 8) =>
            [2^^lv](Z q) -> [8] -> [2^^lv](Z q)

        fast_invnttl v k
          // Base case. lv==2 so just compute the butterfly and return
          | lv == 2 => gs_butterfly`{lv,lv-1} v (zeta_expc@k)

          // Recursive case. Recurse on each half,
          // concatenate the results, butterfly that, and return.
          | lv  > 2 => gs_butterfly`{lv,lv-1} t (zeta_expc@k)
                        where
                          // Split t into two halves s0 and s1
                          [s0, s1] = split v
                          t = (fast_invnttl`{lv-1} s0 (k * 2 + 1)) #
                              (fast_invnttl`{lv-1} s1 (k * 2))

        // Multiply all elements of v by the reciprocal of 128 (modulo q)
        recip_128_modq = (recip 128) : (Z q)
        mul_recip128 : Z_q_256 -> Z_q_256
        mul_recip128 v = [ v@x * recip_128_modq | x <- [0 .. <n] ]

        // Top level entry point - start with lv=256, k=1
        fast_invntt : Tq -> Rq
        fast_invntt v = mul_recip128 (fast_invnttl v 1)

        //////////////////////////////////////////////////////////////
        // Properties and proofs of Naive and Fast NTT
        //////////////////////////////////////////////////////////////

        /**
         * This property demonstrates that NaiveNTT is self-inverting.
         * ```repl
         * :prove NaiveNTT_Inverts
         * ```
         */
        NaiveNTT_Inverts : Rq -> Bit
        property NaiveNTT_Inverts f =  NaiveNTTInv (NaiveNTT f) == f

        /**
         * This property demonstrates that NaiveNTTInv is self-inverting.
         * ```repl
         * :prove NaiveNTTInv_Inverts
         * ```
         */
        NaiveNTTInv_Inverts : Tq -> Bit
        property NaiveNTTInv_Inverts f =  NaiveNTT (NaiveNTTInv f) == f

        /**
         * This property demonstrates that `fast_ntt` is the inverse of `fast_invntt`.
         * ```repl
         * :prove fast_ntt_inverts
         * ```
         */
        fast_ntt_inverts : Rq -> Bit
        property fast_ntt_inverts    f =  fast_invntt (fast_ntt f)    == f

        /**
         * This property demonstrates that `fast_invntt` is the inverse of `fast_ntt`.
         * ```repl
         * :prove fast_invntt_inverts
         * ```
         */
        fast_invntt_inverts : Tq -> Bit
        property fast_invntt_inverts f =  fast_ntt    (fast_invntt f) == f

        /**
         * This property demonstrates that `naive_ntt` is equivalent to `fast_ntt`.
         * ```repl
         * :prove naive_fast_ntt_equiv
         * ```
         */
        naive_fast_ntt_equiv : Rq -> Bit
        property naive_fast_ntt_equiv f =  NaiveNTT f == fast_ntt f

        /**
         * This property demonstrates that `naive_invntt` is equivalent to `fast_invntt`.
         * ```repl
         * :prove naive_fast_invntt_equiv
         * ```
         */
        naive_fast_invntt_equiv : Tq -> Bit
        property naive_fast_invntt_equiv f =  NaiveNTTInv f == fast_invntt f

    /**
     * The Number-Theoretic Transform (NTT) is used to improve the efficiency
     * of multiplication in the ring `R_q`. We choose to use the fast version
     * of NTT, which is equivalent to the version described in the spec.
     */
    NTT : Rq -> Tq
    NTT = fast_ntt

    /**
     * The inverse of the Number-Theoretic Transform (NTT) is used to improve
     * the efficiency of multiplication in the ring `R_q`. We choose to use
     * the fast version of inverse function, which is equivalent to the version
     * described in the spec.
     */
    NTTInv : Tq -> Rq
    NTTInv = fast_invntt

    /**
     * The notation `NTT` is overloaded to mean both a single application of `NTT`
     * to an element of `R_q` and also `k` applications of `NTT` to every element
     * of a `k`-length vector.
     * [FIPS-203] Section 2.4.6 Equation 2.9.
     */
    NTT_Vec v = map NTT v

    /**
     * The notation `NTTInv` is overloaded to mean both a single application of
     * `NTTInv` to an element of `R_q` and also `k` applications of `NTTInv` to
     * every element of a `k`-length vector.
     * [FIPS-203] Section 2.4.6.
     */
    NTTInv_Vec v = map NTTInv v

//////////////////////////////////////////////////////////////
// Polynomial multiplication in the NTT domain
//////////////////////////////////////////////////////////////

/**
 * Compute the product of two degree-one polynomials with respect to a
 * quadratic modulus.
 * [FIPS-203] Section 4.3.1 Algorithm 12.
 */
BaseCaseMultiply : [2] (Z q) -> [2] (Z q) -> (Z q) -> [2] (Z q)
BaseCaseMultiply a b root = [c0, c1]
  where
    c0 = a@1 * b@1 * root + a@0 * b@0
    c1 = a@0 * b@1 + a@1 * b@0

/**
 * Compute the product (in the ring `T_q`) of two NTT representations.
 * [FIPS-203] Section 4.3.1 Algorithm 11.
 */
MultiplyNTTs : Tq -> Tq -> Tq
MultiplyNTTs a b = join [BaseCaseMultiply (f_hat_i i) (g_hat_i i) (root i) | i : Byte <- [0 .. 127]]
  where
    f_hat_i i = [a@(2*i),a@(2*i+1)]
    g_hat_i i = [b@(2*i),b@(2*i+1)]
    root i = (zeta^^(reverse (64 + (i >> 1)) >> 1) * ((-1 : (Z q)) ^^ (i)))

/**
 * Testing that (1+x)^2 = 1+2x+x^2.
 * ```repl
 * :prove TestMult
 * ```
 */
TestMult : Bit
property TestMult = prod f f == fsq where
  f = [1, 1] # [0 | i <- [3 .. 256]]
  fsq = [1,2,1] # [0 | i <- [4 .. 256]]

  prod : Rq -> Rq -> Rq
  prod a b = NTTInv (MultiplyNTTs (NTT a) (NTT b))

/**
 * The cross product notation ×𝑇𝑞 is defined as the `MultiplyNTTs` function
 * (also referred to as `T_q` multiplication).
 * [FIPS-203] Section 2.4.5 Equation 2.8.
 */
dot : Tq -> Tq -> Tq
dot f g = MultiplyNTTs f  g

/**
 * Overloaded `dot` function between two vectors is a standard dot-product
 * functionality with `T_q` multiplication as the base operation.
 * [FIPS-203] Section 2.4.7 Equation 2.14.
 */
dotVecVec : {k1} (fin k1) => [k1]Tq -> [k1]Tq -> Tq
dotVecVec v1 v2 = sum (zipWith dot v1 v2)

/**
 * Overloaded `dot` function between a matrix and a vector is standard matrix-
 * vector multiplication with `T_q` multiplication as the base operation.
 * [FIPS-203] Section 2.4.7 Equation 2.12 and 2.13.
 */
dotMatVec : {k1,k2} (fin k1, fin k2) => [k1][k2]Tq -> [k2]Tq -> [k1]Tq
dotMatVec matrix vector = [dotVecVec v1 vector | v1 <- matrix]

/**
 * Overloaded `dot` function between two matrices is standard matrix
 * multiplication with `T_q` multiplication as the base operation.
 * [FIPS-203] Section 2.4.7.
 */
dotMatMat :{k1,k2,k3} (fin k1, fin k2, fin k3) =>
    [k1][k2]Tq -> [k2][k3]Tq -> [k1][k3]Tq
dotMatMat matrix1 matrix2 = transpose [dotMatVec matrix1 vector | vector <- m']
    where m' = transpose matrix2

/**
 * The K-PKE component scheme.
 *
 * ⚠️ This scheme is not approved for stand-alone use! ⚠️
 * K-PKE is an encryption scheme consisting of three algorithms `(KeyGen,
 * Encrypt, Decrypt)`, which are used to instantiate the approved ML-KEM
 * scheme. It's not secure as a standalone scheme; it doesn't do any input
 * checking.
 * [FIPS-203] Section 5.
 */
private submodule K_PKE where
    // Encryption key for the K_PKE component scheme.
    // [FIPS-203] Section 5 Algorithm 13. See "Output".
    type EncryptionKey = [384 * k + 32]Byte

    // Decryption key for the K_PKE component scheme.
    // [FIPS-203] Section 5 Algorithm 13. See "Output".
    type DecryptionKey = [384 * k]Byte

    // Ciphertext generated by the K_PKE component scheme.
    // [FIPS-203] Section 5 Algorithm 14. See "Output".
    type Ciphertext = [32 * (d_u * k + d_v)]Byte

    /**
     * Key generation for the K-PKE component scheme.
     *
     * ⚠️ Warnings ⚠️
     * - This scheme is not approved for use in a stand-alone fashion! It does not
     *   do any input validation and should only be used as a subroutine of ML-KEM.
     * - The seed `d` passed as input and the decryption key `dkPKE` returned from
     *   this algorithm must be kept private!
     *
     * [FIPS-203] Section 5.1 Algorithm 13.
     */
    KeyGen: [32]Byte -> (EncryptionKey, DecryptionKey)
    KeyGen d = (ekPKE, dkPKE) where
        // Step 1.
        (ρ, σ) = G (d # [`(k)])
        // Steps 3-7.
        A_hat = [[ SampleNTT (ρ # [j] # [i])
            | j <- [0 .. k-1]]
            | i <- [0 .. k-1]]
        // Steps 2, 8-11.
        s = [SamplePolyCBD`{eta_1} (PRF σ N)
            | N <- [0 .. k-1]]
        // Steps 12 - 15.
        e = [SamplePolyCBD`{eta_1} (PRF σ N)
            | N <- [k .. 2 * k - 1]]
        // Step 16.
        s_hat = NTT_Vec s
        // Step 17.
        e_hat = NTT_Vec e
        // Step 18.
        t_hat = (dotMatVec A_hat s_hat) + e_hat
        // Step 19.
        ekPKE = (Encode`{12} t_hat) # ρ
        // Step 20.
        dkPKE = Encode`{12} (s_hat)

    /**
     * Encryption algorithm for the K-PKE component scheme.
     *
     * ⚠️ Warning ⚠️ This scheme is not approved for use in a stand-alone fashion!
     * It does not do any input validation and should only be used as a subroutine
     * of ML-KEM.
     *
     * [FIPS-203] Section 5.2 Algorithm 14.
     */
    Encrypt : EncryptionKey -> [32]Byte -> [32]Byte -> Ciphertext
    Encrypt ekPKE m r = c where
        // Step 2.
        t_hat = Decode`{12} (ekPKE @@[0 .. 384*k - 1])
        // Step 3.
        rho = ekPKE @@[384*k .. 384*k + 32 - 1]
        // Steps 4-8.
        A_hat = [[ SampleNTT (rho # [j] # [i])
            | j <- [0 .. k-1]]
            | i <- [0 .. k-1]]
        // Steps 1, 9-12.
        y = [SamplePolyCBD`{eta_1} (PRF r N)
            | N <- [0 .. k-1]]
        // Steps 13-16.
        e1 = [SamplePolyCBD`{eta_2} (PRF r N)
            | N <- [k .. 2 * k - 1]]
        // Step 17. In the spec, the second parameter is `N = 2k`. In this
        // implementation, `N` itself is out of scope, so we use the fixed
        // value instead.
        e2 = SamplePolyCBD`{eta_2} (PRF r (2 * `k))
        // Step 18.
        y_hat = NTT_Vec y
        // Step 19.
        u = NTTInv_Vec (dotMatVec (transpose A_hat) y_hat) + e1
        // Step 20.
        mu = Decompress'`{1} (DecodeBytes'`{1} m)
        // Step 21.
        v = (NTTInv (dotVecVec t_hat y_hat)) + e2 + mu
        // Step 22.
        c1 = EncodeBytes`{d_u} (Compress`{d_u} u)
        // Step 23.
        c2 = EncodeBytes'`{d_v} (Compress'`{d_v} v)
        // Step 24.
        c = c1 # c2

    /**
     * Decryption algorithm for the K-PKE component scheme.
     *
     * ⚠️ Warning ⚠️ This scheme is not approved for use in a stand-alone fashion!
     * It does not do any input validation and should only be used as a subroutine
     * of ML-KEM.
     *
     * [FIPS-203] Section 5.3 Algorithm 15.
     */
    Decrypt : DecryptionKey -> Ciphertext -> [32]Byte
    Decrypt dkPKE c = m where
        // Step 1.
        c1 = c @@[0 .. 32 * d_u * k - 1]
        // Step 2.
        c2 = c @@[32 * d_u * k .. 32 * (d_u * k + d_v) - 1]
        // Step 3.
        u' = Decompress`{d_u} (DecodeBytes`{d_u} c1)
        // Step 4.
        v' = Decompress'`{d_v} (DecodeBytes'`{d_v} c2)
        // Step 5.
        s_hat = Decode`{12} dkPKE
        // Step 6.
        w = v' - NTTInv (dotVecVec s_hat (NTT_Vec u'))
        // Step 7.
        m = EncodeBytes'`{1} (Compress'`{1} w)

    /**
     * The K-PKE scheme must satisfy the basic properties of an encryption
     * scheme.
     * This must be `:check`ed because K-PKE is correct with probability
     * 1-delta and not 1. It is not provably correct because there is a
     * (very small!) fraction of seeds `d, r` that don't work.
     * ```repl
     * :set tests=3
     * :check CorrectnessPKE
     * ```
     */
    CorrectnessPKE : [32]Byte -> [32]Byte -> [32]Byte -> Bit
    property CorrectnessPKE d m r = (m' == m) where
        (pk, sk) = KeyGen d
        c = Encrypt pk m r
        m' = Decrypt sk c

/**
 * Uses randomness to generate an encapsulation key and corresponding
 * decapsulation key.
 *
 * The randomness here is passed explicitly as a parameter and is not checked
 * for validity, so this actually corresponds to
 * [FIPS-203] Section 6.1 Algorithm 16 (`ML_KEM.KeyGen_internal`).
 *
 * Note: This is not Algorithm 19 because:
 * - The randomness is passed explicitly as a parameter;
 * - It does not document / require input validation.
 */
ML_KEM_KeyGen : ([32]Byte,[32]Byte) -> ([384*k+32]Byte, [768*k+96]Byte)
ML_KEM_KeyGen (z,d) = (ek, dk) where
  (ekPKE, dkPKE) = K_PKE::KeyGen d
  ek = ekPKE
  dk = dkPKE#ek#H(ek)#z

/**
 * Uses the encapsulation key and randomness to generate a key and an
 * associated ciphertext.
 *
 * [FIPS-203] Section 6.2 Algorithm 17 (`ML_KEM.Encaps_internal`).
 *
 * Note: This is not Algorithm 20 because:
 * - The randomness is passed explicitly as a parameter;
 * - It does not document / require input validation.
 */
ML_KEM_Encaps : ([384*k+32]Byte, [32]Byte) -> ([32]Byte, [32*(d_u*k+d_v)]Byte)
ML_KEM_Encaps (ek, m) = (K, c) where
  (K, r) = G(m#H(ek))
  c = K_PKE::Encrypt ek m r

/**
 * Uses the decapsulation key to produce a shared secret key from a ciphertext.
 *
 * [FIPS-203] Section 6.3 Algorithm 18 (`ML_KEM.Decaps_internal`).
 *
 * Note: This is not Algorithm 21 because it does not document / require input
 * validation.
 */
ML_KEM_Decaps : ([32*(d_u*k+d_v)]Byte, [768*k+96]Byte) -> [32]Byte
ML_KEM_Decaps (c, dk) = K
  where
    dkPKE = dk@@[0 .. 384*k - 1] // extract (from KEM decaps key) the PKE decryption key
    ekPKE = dk@@[384*k .. 768*k + 32 - 1] // extract PKE encryption key
    h = dk@@[768*k + 32 .. 768*k + 64 - 1] // extract hash of PKE encryption key
    z = dk@@[768*k + 64 .. 768*k + 96 - 1] // extract implicit rejection value
    m' = K_PKE::Decrypt dkPKE c // decrypt ciphertext
    (K', r') = G(m'#h)
    Kbar = J(z#c) : [32]Byte
    c' = K_PKE::Encrypt ekPKE m' r'
    K = if (c != c') then Kbar // Suggestion to spec: Rename K' to K
                     else K'


/**
 * The ML-KEM scheme is correct with probability 1-delta and not 1. As a
 * result, running `:prove CorrectnessPKE` will not succeed since there is a
 * fraction delta of seeds `d`, `z`, `m` that do not work.
 * Cryptol does not currently support counting.
 * ```repl
 * :set tests=3
 * :check CorrectnessKEM
 * ```
 */
CorrectnessKEM : ([32]Byte, [32]Byte, [32]Byte) -> Bit
property CorrectnessKEM(z, d, m) = (K == K') where
  (pk, sk) = ML_KEM_KeyGen(z, d)
  (K, c) = ML_KEM_Encaps(pk, m)
  K' = ML_KEM_Decaps(c, sk)

parameter
    /*
     * The parameter `k` determines the dimensions of the encryption key matrix
     * and the secret and noise vectors created and used in key generation and
     * encryption.
     * [FIPS-203] Section 8.
     *
     * The coonstraint on the width of `k` is drawn from `K-PKE-KeyGen`. In
     * that function, the variable `N` varies from 0 to `2k` and is passed as
     * the second parameter to the `PRF` function. `PRF` restricts the second
     * parameter to be exactly 1 byte. Therefore, `2k` must fit into a byte.
     * [FIPS-203] Section 5.1 Algorithm 13 (see lines 2 and 8-15) and Section
     * 4.1 Equation 4.2.
     */
    type k : #
    type constraint (width k > 0, width (2*k) <= 8)

    /*
     * The parameter `eta_1` specifies the distribution from which the secret
     * vectors are drawn in key generation and encryption.
     * [FIPS-203] Section 8.
     *
     * eta_1 must be in the set {2, 3} for use in a PRF and to parameterize
     * sampling from the centered binomial distribution.
     * [FIPS-203] Section 4.1 "Pseudorandom Function" and Section 4.2.2
     * "Sampling from the centered binomial distribution"
     */
    type eta_1 : #
    type constraint (fin eta_1, 2 <= eta_1, eta_1 <= 3)

    /*
     * The parameter eta_2 is required to specify the distribution from which
     * the noise vectors are drawn in encryption.
     * [FIPS-203] Section 8.
     *
     * eta_2 must be in the set {2, 3} for use in a PRF and to parameterize
     * sampling from the centered binomial distribution.
     * [FIPS-203] Section 4.1 "Pseudorandom Function" and Section 4.2.2
     * "Sampling from the centered binomial distribution"
     */
    type eta_2 : #
    type constraint (fin eta_2, 2 <= eta_2, eta_2 <= 3)

    /*
     * The parameter `d_u` is a parameter and input for the compression and
     * encoding functions.
     * [FIPS-203] Section 8.
     *
     * For compression, `d_u` must be smaller than the bit length of `q` (fixed
     * to 12).
     * [FIPS-203] Section 4.2.1 "Compression and decompression".
     * For encoding, the valid range of values for `d_u` is `1 ≤ d_u ≤ 12`.
     * [FIPS-203] Section 4.2.1 "Encoding and decoding".
     */
    type d_u : #
    type constraint (fin d_u, d_u < 12, d_u > 0)

    /*
     * The parameter `d_v` is a parameter and input for the compression and
     * encoding functions.
     * [FIPS-203] Section 8.
     *
     * For compression, `d_v` must be smaller than the bit length of `q` (fixed
     * to 12).
     * [FIPS-203] Section 4.2.1 "Compression and decompression".
     * For encoding, the valid range of values for `d_v` is `1 ≤ d_v ≤ 12`.
     * [FIPS-203] Section 4.2.1 "Encoding and decoding".
     */
    type d_v : #
    type constraint (fin d_v, d_v < 12, d_v > 0)