/*
   This module implements the digital signature scheme Dilithium
   submitted to the NIST post-quantum project.

   See https://pq-crystals.org/dilithium/data/dilithium-specification.pdf

   Copyright (c) 2018, Galois Inc.
   www.cryptol.net
   You can freely use this source code for educational purposes.

*/

/*Fixes to comply with the round2 submission to NIST*/
//1. Randombytes size changed from SEEDBYTES to 3*SEEDBYTES from
//2. Expand Mat definition changes


module Primitive::Asymmetric::Signature::DilithiumR2BV where

import Primitive::Keyless::Hash::keccak as SHA3
import Common::utils
import Common::mod_arith
import Primitive::Asymmetric::Cipher::RSA
import Primitive::Asymmetric::Signature::testDilithium
import Primitive::Asymmetric::Signature::test_latest


// These parameters are fixed for all four recommended implementations
type qbits = 23
type uint32_t = 32
type q = 0x7fe001 //8380417
type n = 0x100 //256
type d = 0xe
wc= 0x3c //60
gamma1 = ((`q) - 1) / 16:[_]
gamma2 = ( gamma1 / 2 ):[_]
alpha = (2*gamma2):[_]
qinv  = 0x00000000fc7fdfff
type POLT1_SIZE_PACKED = 288

// Parameters for Number Theoretic Transform (NTT)
rootOfUnity    = 1753 : [qbits]
rootOfUnityInv = 731434 : [qbits]
ninv           = 8347681 : [qbits]

// Parameterize the types based on the following implemenations
/* Weak, Medium, Recommended, and VeryHigh*/
/*parameter
    type k : #
    type constraint (fin k, k>=3, k<=6)
    type l : #
    type constraint (fin l, l>=2, l<=5)
    eta : [4]
    beta : [12]
    omega : [8]*/
type k = 4
type l = 3

eta = 6
beta = 325
type omega = 80

// Integer polynomials; a superset of ring R referenced in specification
type intPoly        = [n][qbits]
type intPolyVec dim = [dim]intPoly

// Polynomials; a superset of ring R_q referenced in specification
type poly        = [n][qbits] // This is R_q, actually defines a super set of R_q
type polyVec dim = [dim]poly

// Polynomials in NTT representation
type nttPoly          = [n][qbits]
type nttVec dim       = [dim]nttPoly
type nttMat dim1 dim2 = [dim1](nttVec dim2)


type PublicKey = {rho : [256], t1 : intPolyVec k}
type SecretKey = {rho : [256]
                    , K  : [256]
                    , tr : [384]
                    , s1 : polyVec l
                    , s2 : polyVec k
                    , t0 : intPolyVec k}
type SEEDBYTES = 32
type CRYPTO_PUBLICKEYBYTES = SEEDBYTES + (POLT1_SIZE_PACKED * k)

/* Generate public and private keys */
Gen : [3*SEEDBYTES*8] -> (PublicKey,SecretKey)
Gen s = (pk, sk)
    where
      [rho, rho', K] = split`{3} s //rho <- {0, 1}^256, K <- {0,1}^256
      A       = ExpandA (split rho) //A ∈ R^(k×l)_q := ExpandA(rho)
      s1      = PolyUniformEtaV`{dim=l} rho' zero // s1<-s^l_η
      s2      = PolyUniformEtaV`{dim=k} rho' `l // s2<-s^k_η
      s1ntt   = map ntt s1
      As1     = map nttinv (nttMatMul A s1ntt)
      t       = paddV As1 s2     //t:= As1 + s2
      (t1,t0) = Power2RoundV t  //(t1, t0):= Power2Round_q(t, d=4)
      tr      = CRH (rho#(pack_t1 t1)) //tr ∈ {0,1}^384 := CRH(rho||t1)
      pk      = { rho = rho, t1 = t1}
      sk      = { rho = rho, K = K, tr = tr, s1 = s1, s2 = s2, t0 = t0}

// Known Answer Test
// To check this property, it is necessary to import testDilithium

test_key_gen = (pk.rho#(pack_t1 pk.t1) == testCase1.pk) /\
    ((sk.rho#sk.K#sk.tr#(pack_polyeta sk.s1)#(pack_polyeta sk.s2)#(pack_t0 sk.t0)) == testCase1.sk)
    where
    (pk, sk) = Gen (join testCase1.seed)

/* Generate signature for message M */
// corresponds to crypto_sign_signature
Sign : {mbytes} (fin mbytes, mbytes>=1) => SecretKey -> [mbytes*8] -> (polyVec l, polyVec k, poly)
Sign sk M = (final_state.z, h, nttinv final_state.c')
     where
      A     = ExpandA (split sk.rho) // A ∈ R^(k×l)_q := ExpandA(ρ)
      mu    = CRH`{b=48+mbytes} (sk.tr#M) // μ ∈{0,1}^384 := CRH(tr||M)
      kappa = zero // κ := 0
      s1'   = map ntt sk.s1
      s2'   = map ntt sk.s2
      t0'   = map ntt (sk.t0)
      //TODO: check t0' back later

      init : sign_var_types
      init = {z=zero,r0=zero,r1=zero,t0'=t0',c'=zero,w=zero,w1=zero
             ,s1'=s1',s2'=s2',cs2=zero,K=sk.K,mu=mu,A=A,kappa=kappa}

      final_state = dowhile sign_condition sign_body init
      ct0         = map nttinv (nttVecConstMul final_state.c' final_state.t0')
      h           = MakeHintV (psubV zero ct0
                              ,paddV (psubV final_state.w final_state.cs2) (ct0))

// crypto_sign appends message at the end of the signature
crypto_sign : {mbytes} (fin mbytes, mbytes >= 1) => SecretKey -> [mbytes*8] -> [(SIG_SIZE_PACKED + mbytes)*8]
crypto_sign sk m = pack_sig (Sign sk m) # m




type sign_var_types = { z : polyVec l
                          , r0  : intPolyVec k
                          , r1  : intPolyVec k
                          , t0' : nttVec k
                          , c'  : nttPoly
                          , w   : polyVec k
                          , w1  : intPolyVec k
                          , s1' : nttVec l
                          , s2' : nttVec k
                          , cs2 : polyVec k
                          , K   : [256]
                          , mu  : [384]
                          , A   : nttMat k l
                          , kappa: [16]}


sign_condition : sign_var_types -> Bit
sign_condition sv = fail1 \/ fail2
                   where
                    fail1 = ((infNormPolyVec (sv.z)) >= (gamma1-beta)) // ||z||_∞ ≥ γ1 - β
                            \/ ((infNormPolyVec sv.r0) >= (gamma2-beta)) // ||r0||_∞ ≥ γ2 - β
                            \/ (sv.r1 != sv.w1) // r1 ≂̸ w1
                    fail2 = ((infNormPolyVec (ct0)) >= gamma2) // ||ct0||_∞ ≥ γ2
                            \/ ( (foldl (+) 0 cones) > `omega ) // number of ones in h > ω
                    cones = sum (map (\x -> (map onesBV x)) h)
                    ct0   = map nttinv (nttVecConstMul sv.c' sv.t0')
                    h     = MakeHintV (psubV zero ct0
                                      ,paddV (psubV sv.w sv.cs2) (ct0))
                                      // h := MakeHintV(-ct0, w-cs2+ct0, 2γ2)


sign_body : sign_var_types -> sign_var_types
sign_body sv = {z=z,r0=r0,r1=r1,t0'=sv.t0',c'=c',w=w,w1=w1,s1'=sv.s1',s2'=sv.s2',
                   cs2=cs2,K=sv.K,mu=sv.mu,A=sv.A,kappa=(sv.kappa+1)}
              where
                ρ'  = CRH`{b=48+32} (sv.K#sv.mu) // ρ' ∈ {0,1}^384 := CRH(K||μ) (or ρ' <- {0,1}^384 for randomized signing)
                y   = ExpandMask((split ρ'), sv.kappa)// y ∈ S^l_(γ1-1) := ExpandMask(ρ',κ)
                y'  = map ntt y // checked
                w   = map nttinv (nttMatMul sv.A y') // w := Ay
                w1  = HighBitsV w // w1 := HighBitsV(w, 2γ2)
                c'  = ntt ( H (sv.mu,w1) ) // c ∈ B_(60) := H(μ||w1)
                cs1 = map nttinv (nttVecConstMul c' sv.s1') // cs1 := c'.s1'
                cs2 = map nttinv (nttVecConstMul c' sv.s2') // cs2 := c'.s2'
                z   = paddV y cs1 // z:= y+cs1
                (r1, r0) = DecomposeV (psubV w cs2) // Decompose_q(w-cs2, 2γ2)




Verify : {mbytes} (fin mbytes, mbytes>=1) => PublicKey -> [mbytes*8] -> (polyVec l, polyVec k, poly) -> Bit
Verify pk M (z, h, c) = crit1 && crit2 && crit3
       where
        A        = ExpandA (split pk.rho) // A ∈ R^(k×l)_q := ExpandA(ρ)
        mu       = CRH`{b=48+mbytes} ((CRH (pk.rho#(pack_t1 pk.t1)))#M) // μ ∈{0,1}^384 := CRH(CRH(ρ||t1)||M)
        zntt     = map ntt z // NTT(z)
        t1dot2d  = map ntt (map (\p -> map (\x ->  mod_mul(`q, x, (2^^14))) p) pk.t1) // t1.2^^d where d=14
        nttt1dot2d = map ntt t1dot2d
        ct1ntt   = nttVecConstMul (psub zero c) nttt1dot2d   // -ct1
        Az       = nttMatMul A zntt
        w1'      = UseHintV (h, paddV Az ct1ntt)
        zint     = z
        zinf     = infNormPolyVec zint // ||z||_∞
        crit1    = zinf < gamma1 - beta
        crit2    = c == H(mu,w1')
        cones    = sum (map (\x -> (map onesBV x)) h)
        crit3    = ( (foldl (+) 0 cones) > `omega ) // number of 1's in h ≤ ω // TODO: fix this


onesBV : {n} (fin n, n>=1)=> [n] -> [n]
onesBV xs =  l!0
    where l = [0]#[ (if (xs@i) then j+1 else j):[n] | i <- [0..n-1] | j<- l]

//:prove (\x -> (onesBV x) == fromInteger (ones x)):[23]-> Bit

pack_w : intPolyVec k -> [4*n*k]
pack_w w = join [pack_poly p | p <- wBV ]
    where
    wBV = map (\p -> map (\x -> drop`{15} x:[8]) p) w
    pack2 : [2][8] -> [8]
    pack2 xs = xs@0 || (xs@1 << 4)
    pack_poly p = join [ pack2 xs | xs <- split p : [128][2][_] ]

pack_polyeta : {m} (fin m, m >= 1) =>  polyVec m -> [4*n*m]
pack_polyeta s = join [ join [elt p i | i <- [0..(n/2)-1]:[_][8] ] | p <- s ]
    where
    elt : poly -> [8] -> [8]
    elt p i = (c (((p@(2*i+0))) % `q)) || ((c (((p@(2*i+1))) % `q)) << 4)
    c : [qbits] -> [8]
    c num = drop (if num > eta then `q + eta - num else eta - num)

type SETABITS = 4
//unpack_polyeta
type POLETA_SIZE_PACKED = 128

/*unpack_polyeta :  {m} (fin m, m >= 1) =>[m*POLETA_SIZE_PACKED][8] -> polyVec m
unpack_polyeta pvb =  [ elt a | a <- split pvb:[m][128][8] ]
      where
        elt :[128][8] -> poly
        elt a = join [ [ zext (x && 0x0F), zext (x >> 4)] | x <- a ]*/

unpack_polyeta : [POLETA_SIZE_PACKED][8] -> [n][23]
unpack_polyeta p = join [ [ drop`{9}(`q + eta - (zext (x && 0x0F))), drop`{9} (`q + eta - (zext (x >> 4))) ] | x <- p ]

unpack_polyetavec :  {m} (fin m, m >= 1) =>[m][POLETA_SIZE_PACKED][8] -> [m][256][23]
unpack_polyetavec pvb =  [ unpack_polyeta pb | pb <- pvb ]


type POLT0_SIZE_PACKED = 448
pack_t0 : intPolyVec k -> [k*POLT0_SIZE_PACKED*8]
pack_t0 t0 = join [ polyt0_pack p | p <- t0 ]

polyt0_pack : intPoly -> [POLT0_SIZE_PACKED*8]
polyt0_pack p = join [ join [drop`{15} (tmp p i 0),
                       drop`{15} (((tmp p i 0) >> 8) || ((tmp p i 1) << 6)),
                       drop`{15} ((tmp p i 1) >> 2),
                       drop`{15} (((tmp p i 1) >> 10) || ((tmp p i 2) << 4)),
                       drop`{15} ((tmp p i 2) >> 4),
                       drop`{15} (((tmp p i 2) >> 12) || ((tmp p i 3) << 2)),
                       drop`{15} ((tmp p i 3) >> 6)
                     ] | i <- [0..(n/4-1)] ]
        where
          tmp : intPoly -> [8] -> [8] -> [23]
          tmp p i j =  (`q+2^^13 - p@(4*i+j))
          

polyt0_unpack : [POLT0_SIZE_PACKED][8] -> intPoly
polyt0_unpack p = join[ [ (tmp p i 0) || (zext ((tmp p i 1) && zext 0x3F)) << 8,
                          (zext ((tmp p i 1) >> 6)) || (zext (tmp p i 2)) << 2 || (zext ((tmp p i 3) && zext 0x0F)) << 10,
                          (zext ((tmp p i 3) >> 4)) || (zext (tmp p i 4)) << 4 || (zext ((tmp p i 5) && zext 0x03)) << 12,
                          (zext ((tmp p i 5) >> 2)) || (zext (tmp p i 6)) << 6
                        ] | i <- [0..(n/4-1)]
                      ]
          where
            tmp :[POLT0_SIZE_PACKED][8] -> [8] -> [8] -> [23]
            tmp p i j =  zext (2^^13 - p@(7*i+j))


unpack_t0 : [k][POLT0_SIZE_PACKED][8] -> intPolyVec k
unpack_t0 pv = [ (polyt0_unpack pv') | pv' <- pv]


// d must be 14 for this to work, and n must be 256

// polyt1_pack

poly_pack : poly -> [POLT1_SIZE_PACKED*8]
poly_pack p = join [ join (pack8 xs) | xs <- split (map (drop`{14}) p) : [32][8][_]]

pack8 : [8][9] -> [9][8]
pack8 xs = map drop`{1} [ xs@0
                        , xs@0 >> 8 || xs@1 << 1
                        , xs@1 >> 7 || xs@2 << 2
                        , xs@2 >> 6 || xs@3 << 3
                        , xs@3 >> 5 || xs@4 << 4
                        , xs@4 >> 4 || xs@5 << 5
                        , xs@5 >> 3 || xs@6 << 6
                        , xs@6 >> 2 || xs@7 << 7
                        , xs@7 >> 1
                        ]

pack_t1 : polyVec k -> [k*POLT1_SIZE_PACKED*8]
pack_t1 pvk = (join [ poly_pack p | p <- pvk])

// polyt1_unpack

polyt1_unpack : [POLT1_SIZE_PACKED][8] -> poly
polyt1_unpack p = map (\x -> zext x) (join [unpack8 xs | xs <- (split p): [32][9][_] ])
    where unpack8: [9][8] -> [8][12]
          unpack8 xs = [  zext (xs@0) || ((zext (xs@1 && 0x01):[12]) << 8)
                        , zext (xs@1 >> 1) || ((zext (xs@2 && 0x03):[12]) << 7)
                        , zext (xs@2 >> 2) || ((zext (xs@3 && 0x07):[12]) << 6)
                        , zext (xs@3 >> 3) || ((zext (xs@4 && 0x0F):[12]) << 5)
                        , zext (xs@4 >> 4) || ((zext (xs@5 && 0x1F):[12]) << 4)
                        , zext (xs@5 >> 5) || ((zext (xs@6 && 0x3F):[12]) << 3)
                        , zext (xs@6 >> 6) || ((zext (xs@7 && 0x7F):[12]) << 2)
                        , zext (xs@7 >> 7) || ((zext (xs@8 && 0xFF):[12]) << 1)
                        ]



unpack_t1 : [k][POLT1_SIZE_PACKED][8] -> polyVec k
unpack_t1  pv = [ (polyt1_unpack p) |  p <- pv]

//pack_pk

pack_pk :  [32][8] -> polyVec k -> [CRYPTO_PUBLICKEYBYTES*8]
pack_pk rho t1 = (join rho) # (pack_t1 t1)

//unpack_pk

unpack_pk : [CRYPTO_PUBLICKEYBYTES][8] -> ([SEEDBYTES][8], polyVec k)
unpack_pk pk = (take`{32} pk, [polyt1_unpack p | p <- (split (drop`{32} pk):[k][288][_])])

/****Packing SK *********/

type CRHBYTES = 48
type CRYPTO_SECRETKEYBYTES = 2800



//pack_sk

pack_sk : [SEEDBYTES][8] -> [SEEDBYTES][8] -> [CRHBYTES][8] -> polyVec l -> polyVec k -> polyVec k -> [CRYPTO_SECRETKEYBYTES*8]
pack_sk rho key tr s1 s2 t0 = (join rho) # (join key) # (join tr)# (pack_polyeta s1)#(pack_polyeta s2) # (pack_t0 t0)

//unpack_sk


unpack_sk : [CRYPTO_SECRETKEYBYTES][8] -> ([SEEDBYTES][8], [SEEDBYTES][8], [CRHBYTES][8], polyVec l, polyVec k, intPolyVec k)
unpack_sk sk = (sk@@[0..31], sk@@[32..63], sk@@[64..111], s1, s2, t0)// key, tr, s1, s2, t0)
        where  s1 = [ unpack_polyeta p | p <- (split (take`{384} (drop`{112} sk)):[l][128][8])] //@@[112..l*POLETA_SIZE_PACKED-1])
               s2 = [ unpack_polyeta p | p <- (split (take`{512} (drop`{384} sk)):[k][128][8])] //sk@@[l*POLETA_SIZE_PACKED..(l+k)*POLETA_SIZE_PACKED-1]
               split_sk = [[ sk@(i*448 + j) | j<- [0..447]] | i <- [0..3]]
               t0 = unpack_t0 split_sk //: [k][POLT0_SIZE_PACKED][8] //sk@@[(l+k)*POLETA_SIZE_PACKED..CRYPTO_SECRETKEYBYTES]

//property pack_sk_corr x = unpack_sk (split (pack_sk x.0 x.1 x.2 (InttoZPolyVec x.3) (InttoZPolyVec x.4) x.5)) == x

type POLZ_SIZE_PACKED = 640

polyz_pack : poly -> [POLZ_SIZE_PACKED][8]
polyz_pack p =  join [ (tmp p i) | i <- [0..(n/2)-1]]
      where tmp: poly -> [8] -> [5][8]
            tmp p i  = [r0, r1, r2, r3, r4]
              where
                    t x = gamma1 - 1 - p@(2*i+x)
                    t0 = (t 0) + (((sext (t 0))>>31) && `q)
                    t1 = (t 1) + (((sext (t 1))>>31) && `q)
                    r0 = drop t0
                    r1 = drop (t0 >> 8)
                    r2 = drop (t0 >> 16) || drop (t1 << 4)
                    r3 = drop (t1 >> 4)
                    r4 = drop (t1 >> 12)

polyz_unpack : [POLZ_SIZE_PACKED][8] -> [256][32]
polyz_unpack p =  join [ compute_coeffs i | i <- [0..(n/2)-1]]
    where compute_coeffs : [10] -> [2][32]
          compute_coeffs i = [rc0, rc1]
                where
                  c0 = zero # p@(5*i+0) || (zero # p@(5*i+1):[32]) << 8 || (zero # (p@(5*i+2) && 0x0F):[32]) << 16
                  c1 = zero # p@(5*i+2) >> 4 || (zero # p@(5*i+3):[32]) << 4 || (zero # p@(5*i+4):[32]) << 12
                  mc0 = gamma1 - 1 - c0 : [32]
                  mc1 = gamma1 - 1 - c1 : [32]
                  rc0 = mc0 + ((mc0 >>$ 31) && `q)
                  rc1 = mc1 + ((mc1 >>$ 31) && `q)

type SIG_SIZE_PACKED = l*POLZ_SIZE_PACKED+omega+k+n/8+8 // 2044

encodec : poly -> [(n/8+8)*8]
encodec p = (join [ [ p@(8*i+j)!=0 | j <- [0..7] ] | i<- [0..(n/8)-1]])# (join sigSigns)
      where
        signs =[0]# [(if (join qm1coeffsIndcs)@i then s||m else s) | s <- signs | m<- masks| i<-[0..255]]
        masks = [1]# [(if (join nzcoeffsIndcs)@i then (m << 1) else m) | m<-masks | i<-[0..255] ]
        nzcoeffsIndcs =  [ [ p@(8*i+j)!=0 | j <- [0..7] ] | i<- [0..(n/8)-1]]
        qm1coeffsIndcs = [ [ p@(8*i+j)==(`q-1) | j <- [0..7] ] | i<- [0..(n/8)-1]]
        sig = zero:[n/8+8][8]
        sigSigns = [ (signs!0) >>(8*i) | i<-[0..7]]:[8][8]

pack_sig : (polyVec l, polyVec k, poly) -> [SIG_SIZE_PACKED*8]
pack_sig (z, h, c) = s0#s1#s2
        where s0 = join [join (polyz_pack z') | z' <- z ]
              s2 = encodec c
              s1 = encodeh h
                where
                encodeh : polyVec k -> [(omega+k)*8]
                encodeh h = join omegaUpdates
                  where nzcoeffsIndcs = [ [ (p@j)!=0 | j<-[0..255]]| p<- h]
                        cones = sum (map onesBV nzcoeffsIndcs)
                        sig = zero:[84][8]
                        kUpdates0=[sig]#[(if (nzcoeffsIndcs@0)@i==True then ((update sig' i) i) else ((update sig' i) 0))| i <- [0..255]| sig' <- kUpdates0]
                        kUpdates1=[kUpdates0!0]#[(if (nzcoeffsIndcs@1)@i==True then ((update sig' i) i) else ((update sig' i) 0))| i <- [0..255]| sig' <- kUpdates1]
                        kUpdates2=[kUpdates1!0]#[(if (nzcoeffsIndcs@2)@i==True then ((update sig' i) i) else ((update sig' i) 0))| i <- [0..255]| sig' <- kUpdates2]
                        kUpdates3=[kUpdates2!0]#[(if (nzcoeffsIndcs@3)@i==True then ((update sig' i) i) else ((update sig' i) 0))| i <- [0..255]| sig' <- kUpdates3]
                        omegaUpdates = (updates (kUpdates3!0) [`omega+0, `omega+1, `omega+2, `omega+3] [0, 1, 2, 3])

decodec : [(n/8+8)][8] -> poly
decodec xs = coeffs'!0
  where coeffs = zero:poly
        signs = [0]#[ ((sext s) || ((sext (xs@(`n/8+i))):[64]) << (8*i)) | i<-[0..7] | s<-signs] :[9][64]
        signs' = [signs!0]#[ (if ((((xs@i) >> j) && 0x01) == 1) then (s >> 1) else s) | j<- [0..255] | s <- signs' | i<- [0..3]]
        coeffs' = [coeffs]#[(if ((((xs@i) >> j) && 0x01)==1) then (update coeff (8*i+j) (1^(-((drop s)&&1))&&(1^(`q-1)))) else coeff) | i<- [0..7] | j<- [0..255] | s <- signs' | coeff <-coeffs' ]

decodeh: [(omega+k)][8] -> polyVec k
decodeh xs = pv // it is supposed to be pv'!0
      where
        pv = zero : polyVec k
        ks = [0]#[xs@(`omega+i) | i<- [0..3]]
        //pv' = [pv] # join [ [ (if j < (xs@(`omega+i)) then (updateCoeffs p i j' 1)  else p) | j' <- [xs@j] ]| j<-ks | i<- [0..3] | p <- pv' ] // TODO: fix this

unpack_sig : [SIG_SIZE_PACKED][8] -> ([l][n][32], polyVec k, poly)
unpack_sig sig = (z, h, c)
        where type zlen = l*POLZ_SIZE_PACKED
              z = [ (polyz_unpack p) | p <- split (sig@@[0..zlen - 1]):[l][POLZ_SIZE_PACKED][8] ]
              h = decodeh (sig@@[zlen..zlen + (omega + k) - 1])
              c = decodec (sig@@[zlen + (omega + k).. SIG_SIZE_PACKED-1])

updateCoeffs :  polyVec n -> [k] -> [8] -> [qbits] -> polyVec n
updateCoeffs pv i j a =  upv
      where  upv = (update pv i up)
             up = (update p j a)
             p = pv@i


// Only works when n=256

// This function has been modified in round2
//PolyUniformEtaV : {dim} (fin dim, dim>=1,width (dim-1) <= 8) => [256] -> [8] -> polyVec dim // round1
PolyUniformEtaV : {dim} (fin dim, dim>=1,width (dim-1) <= 8) => [256] -> [16] -> polyVec dim
PolyUniformEtaV r nonce = [PolyUniformEta (split r) (nonce + j) | j <- [0..(dim-1)]:[dim][16]]

genS : [8] -> [2][4]
genS byte = [t0, t1]
    where
    t0 = drop`{4} (byte && 0x0F)
    t1 = drop`{4} (byte >> 4)

// This function has been modified in round2
//(uint8_t) D means taking 8 LSBs from D
//PolyUniformEta : [SEEDBYTES*8] -> [8] -> poly
PolyUniformEta : [SEEDBYTES][8] -> [16] -> poly
PolyUniformEta rho nonce = map (\x -> if ((toInteger eta) - (toInteger x)) < 0 then (fromInteger  (((toInteger eta) - (toInteger x))+`q):[23]) else (fromInteger ((toInteger eta) - (toInteger x)):[23])) (take`{n} withinEta)
    where
        seed = (join rho)#(drop`{8} nonce)# (take`{8} nonce)
        randoms = ((join (SHA3::toBytes (take`{2*8*168} (SHA3::SHAKE128 (join (SHA3::toBytes seed))))))#zero)
        withinEta = randomsInRangeDouble genS (2*eta) randoms


H : ([384],intPolyVec k) -> poly
H (mu,w) = (SampleInBall ss samples)
  where
    w_packed = pack_w w
    randoms  = join (SHA3::toBytes (take`{4352} (SHA3::SHAKE256 (join (SHA3::toBytes (mu#w_packed))))))
    ss       = take`{60}(reverse (join (reverse (split (take`{64} randoms):[8][8]))))

    extByte : [8] -> [8]
    extByte x = x

    samples : [60][8]
    samples = take`{60} (randomsInRanges extByte [196..255] (drop`{64} randoms#zero))


SampleInBall : [60] -> [60][8] -> [256][qbits]
SampleInBall signs jsamples = ys ! 0
              where
              ys = [ zero:[256][qbits]]
                    # [ if i==j then (if [s]==1 then (update y i (`q-1)) else (update y i 1))  //((-1:Integer)^^(toInteger [s]))
                        else (if [s]==1 then (updates y [j,i] [`q-1,y@j]) else (updates y [j,i] [1,y@j]))  | i <- [196..255]
                                                                  | j <- jsamples
                                                                  | s <- signs
                                                                  | y <- ys
                      ]


ExpandMask : ([CRHBYTES][8], [16]) -> polyVec l
ExpandMask  ( ρ', kappa) = [samplePoly ρ' kappa i `l | i <- [0..(l-1)] ]


samplePoly : [CRHBYTES][8] -> [16] -> [2] -> [2] -> poly
//samplePoly K mu kappa i dim = (map (\x -> (`q+gamma1-1-(zero#x))) coeffs)
samplePoly ρ' kappa i dim = (map (\x -> mod_sub(`q, mod_sub(`q, gamma1, 1), zero#x)) coeffs)
    where
        (upper:[20])      =  drop`{4}(2*gamma1-2):[20]
        kappaBytes = join (reverse (split ((zext dim)*kappa+(zext i)):[2][8])) // LEB order
        s          = join (SHA3::toBytes (take`{5*8*136} (SHA3::SHAKE256 (join (SHA3::toBytes ((join ρ')#kappaBytes)))))) // checked
        (coeffs:[n][20])   = take`{n} (randomsInRangeDouble extractPolyElt upper (s#zero))


extractPolyElt : [40] -> [2][20]
extractPolyElt bits = [zero#int1, zero#int2]
                where
                [b0,b1,b2,b3,b4] = [(zero#b):[20] | b <- split bits : [5][8]]
                int1 = b2'*2^^16 + b1*2^^8 +  b0
                int2 = b4*2^^12 + b3*2^^4 +  b2''
                b2'  = b2 && 15
                //b2'' = b2/(16:[20])
                b2'' = b2/16
// seed should be in little endian byte order
CRH : {b} (fin b, b>=1) => [b*8] -> [384]
CRH seed = join (SHA3::toBytes (take`{48*8} (SHA3::SHAKE256 (join (SHA3::toBytes seed)))))

// Fixed for round2 submission

ExpandA : [SEEDBYTES][8] -> [k][l]nttPoly
ExpandA rho = [ [ (matrixPoly (join rho) i j) | j <- [0..(l-1)] ] |  i <- [0..(k-1)] ]

matrixPoly : [SEEDBYTES*8] -> [width k] -> [width l] -> nttPoly
matrixPoly rho i j = take`{n} [drop`{1} elt | elt <- randomElts ]
            where
            randomElts = randomsInRange extractMatElt ((>=) (`q)) (s#zero)
            s          = join (SHA3::toBytes (take`{6720} (SHA3::SHAKE128 (join (SHA3::toBytes (rho#b))))))
            //b        = 2^^4*(zero#j:[8])+(zero#i:[8])
            b          =  drop`{16}(((zero#j:[32]) << 8) + (zero#i:[32]))


extractMatElt : [24] -> [24]
extractMatElt rands = zero#(2^^16 * b2' + 2^^8 * b1 + b0):[24]
                where
                  [b0, b1, b2] = [(zero#b):[23] | b <- split`{3} rands]
                  b2' = (2^^23-1) && b2 // Typo in paper; following C implementation


/*

  Supporting Algorithms; see Figure 3

*/

Power2Round : [qbits] -> ([qbits],[qbits])
Power2Round r = ((r'-r0)/2^^`d,r0) // d = 14
            where r' = mod_pow (`q, r, 1)
                  r0 = centered_mod r' (2^^`d)

polyPower2Round : {m} [m][qbits] -> ([m][qbits], [m][qbits])
polyPower2Round p = unzip [ Power2Round r | r<- p]

Power2RoundV : {dim} (fin dim, dim >= 1) => polyVec dim -> ([dim]intPoly,[dim]intPoly)
Power2RoundV v = unzip (map polyPower2Round v)

ALPHA = 2*gamma2

// returns high and low bits 
Decompose : [qbits] -> ([qbits],[qbits])
Decompose r = if (r' - r0) == (`q - 1) then (0, r0 - 1)
                    else ((r' - r0) / ALPHA, r0)
          where r' =  mod_pow (`q, r, 1)
                r0 = centered_mod r' ALPHA

Decompose' : [23] -> ([8],[32])
Decompose' r = ( zext af,  (`q+(zext b0)))
        where t0 = drop r :[19]
              t1 =  (zext t0) +  ((r>>19) << 9)
              t2 = t1 - ALPHA/2-1
              t3 = drop t2 +  drop (((sext t2:[32]) >>$31) && ALPHA):[20]
              t4 =  (zext t3) - (ALPHA/2)+ 1
              a0 = r - t4
              u0 = zext (a0 -1):[24]
              u1 = u0 >>$ 31
              a1 = (a0 >> 19) + 1
              a2 = (zext a1) - (u1 && 1)
              b0 = (zext t4)- (a2 >> 4) // adds q here in C
              af = drop a2 && 0xf




DecomposePoly : {m} [m][qbits] -> ([m][qbits], [m][qbits])
DecomposePoly p = unzip [Decompose x | x <- p]

DecomposeV : {n} (fin n, n>=1) => polyVec n  -> (polyVec n, polyVec n)
DecomposeV r = unzip [ DecomposePoly p | p <- r ]

HighBits : [qbits] -> [qbits]
HighBits r = (Decompose r).0

HighBitsV : {n} (fin n, n>=1) => polyVec n  -> polyVec n
HighBitsV rv = r1
          where
            (r1,r0) = DecomposeV rv


LowBits : [qbits] -> [qbits]
LowBits r = (Decompose r).1


MakeHint : ([qbits],[qbits]) -> Bit
MakeHint (z,r) = r1 != v1
          where r1 = HighBits r
                v1 = HighBits r+z

CLEAN_Make_hint: ([qbits],[qbits]) -> Bit
CLEAN_Make_hint (z, r) = if ((z <= gamma2) || (z > `q - gamma2) || (z == (`q - gamma2)) && (r == 0)) then False else True

MakeHintP': (poly, poly) -> [qbits]
MakeHintP' (zp, rp) = foldl (+) 0 [ zext [CLEAN_Make_hint (z, r)] | z <- zp | r <- rp]

MakeHintV': {k} (fin k, k>=1) => (polyVec k, polyVec k) -> [qbits]
MakeHintV' (zv, rv) = foldl (+) 0 [MakeHintP' (zp, rp) | zp <- zv | rp <- rv ]

MakeHintP: (poly, poly) -> poly
MakeHintP (zp, rp) =  drop res
    where res = [0]#[coeff+r | r<- res | coeff<- p]
          p = [zext [CLEAN_Make_hint (z, r)] | z <- zp | r <- rp]

MakeHintV : {k} (fin k, k>=1) => (polyVec k, polyVec k) -> polyVec k
MakeHintV (zv, rv) =  [MakeHintP (zp, rp) | zp <- zv | rp <- rv ]



UseHint : ([qbits],[qbits]) -> [qbits]
UseHint  (r,h) = zext (if  ~((h ==0) || (r0+`q>`q)) then drop`{19}(r1 - 1) else (if (r0+`q>`q) then drop`{19}(r1+1) else drop`{19}(r1 - 1)))
        where
          (r1, r0) = Decompose r
          //r1'      = if (r0+`q> `q) then (drop`{19}(r1+1) else drop`{19}(r1 - 1)
UseHintPoly : poly -> poly -> poly
UseHintPoly rp hp = [ UseHint (r, h) | r <- rp | h <- hp ]

UseHintV : {k}(fin k, k>=1) => (polyVec k, polyVec k) -> polyVec k
UseHintV (rv, hv) = [UseHintPoly hpoly rpoly
                              | hpoly <- hv
                              | rpoly <- rv
                              ]

/*

  Utility functions

*/


ones : {a} (fin a, a >= 1) => [a] -> Integer
ones bv = foldl (+) 0 bva
      where
      bva = map toInteger (split bv:[_][1])

/*IPtoP : intPoly -> poly
IPtoP p = map (drop `{uint32_t-qbits}) p


PtoIP : poly -> intPoly
PtoIP p = map (\i -> zero#i) p


IPVtoPV : {dim} (fin dim, dim >= 1) => intPolyVec dim -> polyVec dim
IPVtoPV intp = map IPtoP intp


PVtoIPV : {dim} (fin dim, dim >= 1) => polyVec dim -> intPolyVec dim
PVtoIPV pvec = map PtoIP pvec*/


centered_mod : [qbits] -> [qbits] -> [qbits]
centered_mod x n = if r > (n/2) then r - n
                    else r
              where r = x % n


randomsInRange : {a} (fin a) => ([a]-> [a]) -> ([a] -> Bit) -> [inf] -> [inf][a]
randomsInRange createElt upperCrit randoms = if (upperCrit elt )
                                then  [ elt ]#(randomsInRange createElt upperCrit randomTail)
                                else randomsInRange createElt upperCrit randomTail
                                where
                                elt        = createElt (take`{a} randoms)
                                randomTail = drop`{a} randoms

randomsInRanges : {a,m} (fin a,fin m, m>=1) => ([a]-> [a]) -> [m][a] -> [inf] -> [inf][a]
randomsInRanges createElt uppers randoms =
                if elt <= head uppers
                then  [ elt ]#(randomsInRanges createElt uppersRotate randomTail)
                else randomsInRanges createElt uppers randomTail
                where
                  elt          = createElt (take`{a} randoms)
                  randomTail   = drop`{a} randoms
                  uppersRotate = uppers <<< 1


randomsInRangeDouble : {a} (fin a) => ([2*a]-> [2][a]) -> [a] -> [inf] -> [inf][a]
randomsInRangeDouble createElt upper randoms =
                if (elts@0 <= upper) /\ (elts@1 <= upper)
                then  elts#(randomsInRangeDouble createElt upper randomTail)
                else
                  if (elts@0 <= upper)
                  then [ elts@0 ]#(randomsInRangeDouble createElt upper randomTail)
                  else
                    if (elts@1 <= upper)
                    then [ elts@1 ]#(randomsInRangeDouble createElt upper randomTail)
                    else randomsInRangeDouble createElt upper randomTail
                where
                  elts       = createElt (take`{2*a} randoms)
                  randomTail = drop`{2*a} randoms
/*
  Supporting polynomial and polynomial vector functions
*/

mod_sum : {s, m} (fin s, fin m) => ([s], [m][s]) -> [s]
mod_sum (p, l) = sums!0
    where
    sums = [zero]#[mod_add`{s}(p, x, y) | x <- l | y <- sums]

ntt : poly -> nttPoly
ntt p = nttp
    where
    r k = mod_pow(`q, rootOfUnity, k)
    exponents = join [ [zext i, (256+(zext i))] | i <- [reverse ((128+i) : [8]) | i <- [0..127] ] ]
    nttp = [(mod_sum (`q, [ (mod_mul(`q, (p@idx), (mod_pow (`q, (r k), i)))) | idx<-[0..(n-1)]:[n][width n] | i<-[0..(n-1)]:[n][23]]))
           | k <- exponents
           ]

nttinv : nttPoly -> poly
nttinv p' = p
    where
        pu = reorder p'
        r' i = mod_pow (`q, rootOfUnityInv, (i*2))
        p = [ mod_mul(`q, ninv, mod_mul(`q, mod_pow(`q, rootOfUnityInv, i), (mod_sum (`q, [mod_mul(`q, (pu@jdx), (r' ((i*j))))
            | jdx<-[0..(n-1)]:[n][width n]
            | j<-[0..(n-1)]:[n][qbits]
            ]))))
            | i <- [0..255]:[n][qbits]
            ]

// Dilithium uses a non-standard ordering of elements in the NTT domain; this function reorders the elements.
reorder : nttPoly -> nttPoly
reorder a = join [ [a1 @ i, a2 @ i] | i <- [0..127]:[_][8] ]
        where
          a1 = a @@ [ (i-1)/2 | i <- [reverse ((128+i) : [8]) | i <- [0..127] ] ]
          a2 = reverse (a @@ [ (511 - (zero#i):[9])/2 | i <- [reverse ((128+i) : [8]) | i <- [0..127] ] ])



// Operations on NTT polynomials

nttMatMul : {dim1,dim2} (fin dim1,fin dim2) => nttMat dim1 dim2 -> nttVec dim2 -> nttVec dim1
nttMatMul mat vec = [ nttDotProduct v vec | v <- mat ]

nttDotProduct : {dim} (fin dim) => nttVec dim -> nttVec dim -> nttPoly
nttDotProduct v1 v2 = foldl padd (zero:nttPoly) [ nttPolyMult p1 p2 | p1 <- v1 | p2 <- v2 ]

nttPolyMult : nttPoly -> nttPoly -> nttPoly
nttPolyMult p1 p2 = [ mod_mul(`q, x, y) | x <- p1 | y <- p2]

nttVecConstMul : {dim} (fin dim) => nttPoly -> nttVec dim -> nttVec dim
nttVecConstMul c v = map (nttPolyMult c) v

polyVecSum :  {dim} (fin dim) => polyVec dim -> polyVec dim -> polyVec dim
polyVecSum v1 v2 = map nttinv (paddV v1' v2')
        where
        v1' = map ntt v1
        v2' = map ntt v2

// Polynomial addition and subtraction
padd : [n][qbits] -> [n][qbits] -> [n][qbits]
padd p1 p2 = [ mod_add(`q, x, y) | x <- p1 | y <- p2 ]

psub : [n][qbits] -> [n][qbits] -> [n][qbits]
psub p1 p2 = [ mod_sub(`q, x, y) | x <- p1 | y <- p2 ]

psubV : {dim} (fin dim) => [dim][n][qbits] -> [dim][n][qbits] -> [dim][n][qbits]
psubV v1 v2 = zipWith psub v1 v2


paddV : {dim} (fin dim) => [dim][n][qbits] -> [dim][n][qbits] -> [dim][n][qbits]
paddV v1 v2 = zipWith padd v1 v2

// Aux functions

infNorm : [qbits] -> [qbits]
infNorm x =  (centered_mod x `q)

infNormPoly : intPoly -> [qbits]
infNormPoly p = foldl max 0 p_centered
            where
              p_centered = map infNorm p

infNormPolyVec : {dim} (fin dim, dim>=1) => intPolyVec dim -> [qbits]
infNormPolyVec v = foldl max 0 (map infNormPoly v)


/************************************/
/* Conversion functions helpful in Testing */
/************************************/

// (Z q) to bit-vector type

fromZPoly : [n](Z q) -> [n][width q]
fromZPoly p = map (\x -> ZtoBV x) p

fromZPolyVec : {dim} (fin dim, dim >= 1) => [dim][n](Z q) -> [dim][n][width q]
fromZPolyVec pvec = map (\x -> fromZPoly x) pvec

fromZNttMat : {dim1, dim2} (fin dim1, dim1>=1, fin dim2, dim2>=1) => [dim1][dim2][n](Z q) -> [dim1][dim2][n][width q]
fromZNttMat nttmat = map (\x -> fromZPolyVec x) nttmat

// Integer to Bit-Vector type

InttoZPoly : [n]Integer -> [n][width q]
InttoZPoly p = map (\x -> fromInteger x) p

InttoZPolyVec : {dim} (fin dim, dim >= 1) => [dim][n]Integer -> [dim][n][width q]
InttoZPolyVec pvec = map (\x -> InttoZPoly x) pvec

InttoZNttMat : {dim1, dim2} (fin dim1, dim1>=1, fin dim2, dim2>=1) => [dim1][dim2][n]Integer -> [dim1][dim2][n][width q]
InttoZNttMat nttmat = map (\x -> InttoZPolyVec x) nttmat

//Bit-Vector to Integer type

BVtoIntPoly : poly -> [n]Integer
BVtoIntPoly p = map (\x -> toInteger x) p

BVtoIntPolyVec : {dim} (fin dim, dim >= 1) => polyVec dim -> [dim][n]Integer
BVtoIntPolyVec pvec = map (\x -> BVtoIntPoly x) pvec

BVtoIntNttMat : {dim1, dim2} (fin dim1, dim1>=1, fin dim2, dim2>=1) => nttMat dim1 dim2 -> [dim1][dim2][n]Integer
BVtoIntNttMat nttmat = map (\x -> BVtoIntPolyVec x) nttmat

//Bit-Vector to (Z q) type

BVtoZPoly : poly -> [n](Z q)
BVtoZPoly p = map (\x -> BVtoZ`{q} x) p

BVtoZPolyVec : {dim} (fin dim, dim >= 1) => polyVec dim -> [dim][n](Z q)
BVtoZPolyVec pvec = map (\x -> BVtoZPoly x) pvec

BVtoZNttMat : {dim1, dim2} (fin dim1, dim1>=1, fin dim2, dim2>=1) => nttMat dim1 dim2 -> [dim1][dim2][n](Z q)
BVtoZNttMat nttmat = map (\x -> BVtoZPolyVec x) nttmat

// Integer to Bit-Vector type

/*InttoZPoly : [n]Integer -> [n](Z q)
InttoZPoly p = map (\x -> fromInteger x:(Z q)) p

InttoZPolyVec : {dim} (fin dim, dim >= 1) => [dim][n]Integer -> [dim][n](Z q)
InttoZPolyVec pvec = map (\x -> InttoZPoly x) pvec

InttoZNttMat : {dim1, dim2} (fin dim1, dim1>=1, fin dim2, dim2>=1) => [dim1][dim2][n]Integer -> [dim1][dim2][n](Z q)
InttoZNttMat nttmat = map (\x -> InttoZPolyVec x) nttmat*/

// (Z q) to Integer type

/*fromZPoly : [n](Z q) -> [n]Integer
fromZPoly p = map (\x -> fromZ x) p

fromZPolyVec : {dim} (fin dim, dim >= 1) => [dim][n](Z q) -> [dim][n]Integer
fromZPolyVec pvec = map (\x -> fromZPoly x) pvec

fromZNttMat : {dim1, dim2} (fin dim1, dim1 >= 1, fin dim2, dim2 >= 1) => [dim1][dim2][n](Z q) -> [dim1][dim2][n]Integer
fromZNttMat nttmat = map (\x -> fromZPolyVec x) nttmat*/

