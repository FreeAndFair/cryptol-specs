/* Cryptol DSA Implementation
Copyright (c) 2010-2018, Galois Inc.
www.cryptol.net
You can freely use this source code for educational purposes.
Author: Ajay Kumar Eeralla
source: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf */

module Primitive::Asymmetric::Signature::DSA::DSA where
import Common::mod_arith
import Common::utils


sign : Z q -> Z q -> Z q -> (Z q, Z q)
sign x k z = (r, s)
    where r =  ZtoZ (BVtoZ `{p=p}(mod_pow (pv, g', k')))
          pv = ZtoBV `{a=L} `p
          g' = ZtoBV `{a=L} g
          k' = ZtoBV `{a=L} (ZtoZ `{q=q} k)
          s = BVtoZ `{p=q}  (mod_mul (q', (ZtoBV `{a=N} kinv), zpxr))
          kinv = mp_mod_inv k
          xr = mod_mul(q', x', r')
          zpxr = mod_add(q', xr, z')
          r' = ZtoBV `{a=N} r
          x' = ZtoBV `{a=N} x
          z' = ZtoBV `{a=N} z
          q' = ZtoBV `{a=N} `q


verify : Z p -> Z q -> (Z q, Z q) -> Bit
verify y z (r, s) = ((BVtoZ `{p=q} v) == r)
   where w = (mp_mod_inv s)
         u1 = (zero#mod_mul (q', (ZtoBV z), (ZtoBV w))) :[L]
         u2 = (zero#mod_mul (q', (ZtoBV r), (ZtoBV w))) :[L]
         v = mod_mul (pv, gu1, yu2)
         gu1 =  mod_pow(pv, g', u1)
         yu2 =  mod_pow(pv, y', u2)
         pv = ZtoBV `{a=L} `p
         g' = ZtoBV `{a=L} g
         y' = ZtoBV `{a=L} y
         q' = ZtoBV `{a=N} `q


parameter

    type p : #
    type constraint Constraints p

    g : Z p

    type q : #

    type constraint (fin q, isOdd q, q >= 4)

// NIST recommended bit lengths of p and q
//L: the size of p, N: the size of q

    type L : #

    type N : #
//Comment/uncomment according to the instantiated parameters
    //type constraint (L==1024,N==160)
    type constraint (L==2048,N==224)
    //type constraint (L==2048,N==256)
    //type constraint (L==3072,N==256)





private

    type constraint Constraints a = (fin a, isOdd a, a >= 4)
    //type constraint validPsize L x = (L==1024*x, 2>=x)
    //type constraint validQsize N = (N==160) //N==224, N==256


//property signDsaCorrect x k z = (verify (BVtoZ `{p=p} (mod_pow ((ZtoBV `{a=L} `p), ZtoBV `{a=L} g, (zero#(ZtoBV`{p=q}x):[1024])))) z (sign x k z) ) == True
