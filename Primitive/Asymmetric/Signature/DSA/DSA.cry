/* Cryptol DSA Implementation
Copyright (c) 2010-2018, Galois Inc.
www.cryptol.net
Author: Ajay Kumar Eeralla
source: https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.186-4.pdf */

module Primitive::Asymmetric::Signature::DSA::DSA where
import Common::mod_arith
import Common::utils

parameter

    type constraint HasWidth a b = (fin b, width a <= b, a >= 1)

    type q : #    // prime
    type N : #
    type constraint HasWidth q N

    type p : #    // prime, p - 1  is a multiple of q
    type L : #
    type constraint HasWidth p L

    type constraint (N < L)

    g : Z p




sign : Z q -> Z q -> Z q -> (Z q, Z q)
sign x k z = (r, s)
    where r =  ZtoZ (BVtoZ `{p=p}(mod_pow (pv, g', k')))
          pv = ZtoBV `{1+p,L} `p
          g' = ZtoBV `{a=L} g
          k' = ZtoBV `{a=L} (ZtoZ `{q=q} k)
          s = BVtoZ `{p=q}  (mod_mul (q', (ZtoBV `{a=N} kinv), zpxr))
          kinv = mp_mod_inv k
          xr = mod_mul(q', x', r')
          zpxr = mod_add(q', xr, z')
          r' = ZtoBV `{a=N} r
          x' = ZtoBV `{a=N} x
          z' = ZtoBV `{a=N} z
          q' = ZtoBV `{1+q,N} `q


verify : Z p -> Z q -> (Z q, Z q) -> Bit
verify y z (r, s) = ((BVtoZ `{p=q} v) == r)
   where w = (mp_mod_inv s)
         u1 = (zero#mod_mul (q', (ZtoBV z), (ZtoBV w))) :[L]
         u2 = (zero#mod_mul (q', (ZtoBV r), (ZtoBV w))) :[L]
         v = mod_mul (pv, gu1, yu2)
         gu1 =  mod_pow(pv, g', u1)
         yu2 =  mod_pow(pv, y', u2)
         pv = ZtoBV `{1+p,L} `p
         g' = ZtoBV `{a=L} g
         y' = ZtoBV `{a=L} y
         q' = ZtoBV `{1+q,N} `q


private


property signDsaCorrect x k z =
  verify ( BVtoZ `{p=p} (mod_pow ((ZtoBV `{1+p,L} `p)
         , ZtoBV `{a=L} g, (zero#(ZtoBV`{p=q}x):[L])))
         )
         z
         (sign x k z)
