/*
   This module implements the digital signature scheme Dilithium
   submitted to the NIST post-quantum project.

   See https://pq-crystals.org/dilithium/data/dilithium-specification.pdf
See https://csrc.nist.gov/Projects/post-quantum-cryptography/Round-1-Submissions

   Copyright (c) 2018, Galois Inc.
   www.cryptol.net
   You can freely use this source code for educational purposes.

*/

module Primitive::Asymmetric::Signature::Dilithium_BV where

import Primitive::Keyless::Hash::keccak as SHA3
import Common::utils
import Primitive::Asymmetric::Cipher::RSA


// DilithiumII parameters
// Security level - Medium

type q = 8380417 
type n = 256 
type k = 4
type l = 3
d      = 14
wc     = 60
gamma1 = ((`q : Integer) - 1) / 16 
gamma2 = ( gamma1 / 2 )
eta    = 6
beta   = 325
omega  = 80 : Integer


// Parameters for Number Theoretic Transform (NTT)
rootOfUnity    = 1753 : (Z q)
rootOfUnityInv = 731434 : (Z q)
ninv           = 8347681 : (Z q)

// Integer polynomials; a superset of ring R referenced in specification
type intPoly        = [n]Integer
type intPolyVec dim = [dim]intPoly

// Polynomials; a superset of ring R_q referenced in specification
type poly        = [n](Z q) // This is R_q, actually defines a super set of R_q
type polyVec dim = [dim]poly 

// Polynomials in NTT representation
type nttPoly          = [n](Z q)
type nttVec dim       = [dim]nttPoly
type nttMat dim1 dim2 = [dim1](nttVec dim2)



type PublicKey = {rho : [256], t1 : intPolyVec k} 
type SecretKey = {rho : [256]
                 , K  : [256]
                 , tr : [384]
                 , s1 : polyVec l
                 , s2 : polyVec k
                 , t0 : intPolyVec k}


/* Generate public and private keys */
Gen : [256] -> (PublicKey,SecretKey)
Gen seed = (pk, sk)
    where
      randoms = split`{3} (join (SHA3::toBytes (take`{768} (SHA3::SHAKE256 (join (SHA3::toBytes seed))))))
      (rho, rho', K) = (randoms@0, randoms@1, randoms@2)
      A       = ExpandA rho
      s1      = PolyUniformEtaV`{dim=l} rho' zero
      s2      = PolyUniformEtaV`{dim=k} rho' (zero + `l)
      s1ntt   = map ntt s1
      As1     = map nttinv (nttMatMul A s1ntt)
      t       = paddV As1 s2
      (t1,t0) = Power2RoundV t
      tr      = CRH (rho#(pack_t1 t1))
      pk      = { rho = rho, t1 = t1 }
      sk      = { rho = rho, K = K, tr = tr, s1 = s1, s2 = s2, t0 = t0}

        
/* Generate signature for message M */      
Sign : {mbytes} (fin mbytes, mbytes>=1) => SecretKey -> [mbytes*8] -> (polyVec l, [k][n], poly)
Sign sk M = (final_state.z, h, nttinv final_state.c')
     where
      A     = ExpandA sk.rho
      mu    = CRH`{b=48+mbytes} (sk.tr#M)
      kappa = zero:Integer
      s1'   = map ntt sk.s1
      s2'   = map ntt sk.s2
      t0'   = map ntt (IPVtoPV sk.t0)

      init : sign_var_types
      init = {z=zero,r0=zero,r1=zero,t0'=t0',c'=zero,w=zero,w1=zero
             ,s1'=s1',s2'=s2',cs2=zero,K=sk.K,mu=mu,A=A,kappa=kappa}

      final_state = dowhile sign_condition sign_body init
      ct0         = map nttinv (nttVecConstMul final_state.c' final_state.t0')
      h           = MakeHintV (psubV zero ct0
                              ,paddV (psubV final_state.w final_state.cs2) (ct0)
                              ,2*gamma2
                              )

private

    type sign_var_types = { z   : polyVec l
                          , r0  : intPolyVec k
                          , r1  : intPolyVec k
                          , t0' : nttVec k
                          , c'  : nttPoly
                          , w   : polyVec k
                          , w1  : intPolyVec k
                          , s1' : nttVec l
                          , s2' : nttVec k
                          , cs2 : polyVec k
                          , K   : [256]
                          , mu  : [384]
                          , A   : nttMat k l
                          , kappa: Integer}


    sign_condition : sign_var_types -> Bit
    sign_condition sv = fail1 \/ fail2 
                   where
                    fail1 = ((infNormPolyVec (PVtoIPV sv.z)) >= (gamma1-beta))
                            \/ ((infNormPolyVec sv.r0) >= (gamma2-beta))
                            \/ (sv.r1 != sv.w1)
                    fail2 = ((infNormPolyVec (PVtoIPV ct0)) >= gamma2) 
                            \/ ( (foldl (+) 0 (map ones h)) > omega )
                    ct0   = map nttinv (nttVecConstMul sv.c' sv.t0')
                    h     = MakeHintV (psubV zero ct0
                                      ,paddV (psubV sv.w sv.cs2) (ct0)
                                      ,2*gamma2
                                      )


    sign_body : sign_var_types -> sign_var_types
    sign_body sv = {z=z,r0=r0,r1=r1,t0'=sv.t0',c'=c',w=w,w1=w1,s1'=sv.s1',s2'=sv.s2',
                   cs2=cs2,K=sv.K,mu=sv.mu,A=sv.A,kappa=(sv.kappa+1)}
              where
                y   = ExpandMask(sv.K,sv.mu,sv.kappa)
                y'  = map ntt y
                w   = map nttinv (nttMatMul sv.A y')
                w1  = HighBitsV (w, 2 * gamma2)
                c'  = ntt ( H (sv.mu,w1) )
                cs1 = map nttinv (nttVecConstMul c' sv.s1')
                cs2 = map nttinv (nttVecConstMul c' sv.s2')
                z   = paddV y cs1
                (r1, r0) = DecomposeV (psubV w cs2, 2 * gamma2)




Verify : {mbytes} (fin mbytes, mbytes>=1) => PublicKey -> [mbytes*8] -> (polyVec l, [k][n], poly) -> Bit
Verify pk M (z, h, c) = crit1 && crit2 && crit3
       where
        A        = ExpandA pk.rho
        mu       = CRH`{b=48+mbytes} ((CRH (pk.rho#(pack_t1 pk.t1)))#M)
        zntt     = map ntt z
        t1ntt    = map ntt (IPVtoPV pk.t1)
        ct1ntt   = nttVecConstMul (psub zero c) t1ntt
        ct1ntt2d = map (\p -> map (\x -> x*(2^^d)) p) ct1ntt 
        Az       = nttMatMul A zntt
        w1'      = UseHintV (h, paddV Az ct1ntt2d, 2*gamma2)
        zint     = PVtoIPV z
        zinf     = infNormPolyVec zint
        crit1    = zinf < gamma1 - beta
        crit2    = c == H(mu,w1')
        crit3    = (foldl (+) 0 (map ones h)) <= omega



private
    pack_w : intPolyVec k -> [4*n*k]
    pack_w w = join [pack_poly p | p <- wBV ]
                where
                wBV = map (\p -> map (\x -> fromInteger x:[8]) p) w

                pack2 : [2][8] -> [8]
                pack2 xs = xs@0 || (xs@1 << 4)

                pack_poly p = join [ pack2 xs | xs <- split p : [128][2][_] ]

    pack_polyeta : {m} (fin m, m >= 1) =>  polyVec m -> [4*n*m]
    pack_polyeta s = join [ join [elt p i | i <- [0..(n/2)-1]:[_][8] ] | p <- s ]
                 where
                  elt : poly -> [8] -> [8]
                  elt p i = (c (fromZ`{q} (p@(2*i+0)))) || ((c (fromZ`{q} (p@(2*i+1)))) << 4)
                  c : Integer -> [8]
                  c num = if num > eta then fromInteger (`q + eta - num) else fromInteger (eta - num)

    pack_t0 : intPolyVec k -> [k*3584]
    pack_t0 t0 = join [ pack_poly p | p <- t0 ]
            where
              tmp : intPoly -> [8] -> [8] -> [32]
              tmp p i j = fromInteger (2^^13 - p@(4*i+j))

              pack_poly : intPoly -> [3584]
              pack_poly p = join [ join [drop`{24} (tmp p i 0),
                         drop`{24} (((tmp p i 0) >> 8) || ((tmp p i 1) << 6)),
                         drop`{24} ((tmp p i 1) >> 2),
                         drop`{24} (((tmp p i 1) >> 10) || ((tmp p i 2) << 4)),
                         drop`{24} ((tmp p i 2) >> 4),
                         drop`{24} (((tmp p i 2) >> 12) || ((tmp p i 3) << 2)),
                         drop`{24} ((tmp p i 3) >> 6)
                         ] | i <- [0..(n/4-1)] ]


    // d must be 14 for this to work, and n must be 256
    pack_t1 : intPolyVec k -> [k*288*8]
    pack_t1 t1 = join [pack_poly p | p <- t1BV]
            where
              t1BV = map (\p -> map (\x -> fromInteger x:[9]) p) t1

              pack8 : [8][9] -> [9][8]
              pack8 xs = map drop`{1} [ xs@0 && zero#0xFF
                                      , xs@0 >> 8 || ((xs@1 && zero#0x7F) << 1)
                                      , xs@1 >> 7 || ((xs@2 && zero#0x3F) << 2)
                                      , xs@2 >> 6 || ((xs@3 && zero#0x1F) << 3)
                                      , xs@3 >> 5 || ((xs@4 && zero#0x0F) << 4)
                                      , xs@4 >> 4 || ((xs@5 && zero#0x07) << 5)
                                      , xs@5 >> 3 || ((xs@6 && zero#0x03) << 6)
                                      , xs@6 >> 2 || ((xs@7 && zero#0x01) << 7)
                                      , xs@7 >> 1
                                      ]
              pack_poly p = join [join (pack8 xs) | xs <- split p : [32][8][_]]

    // Only works when n=256
    PolyUniformEtaV : {dim} (fin dim, dim>=1,width (dim-1) <= 8) => [256] -> [8] -> polyVec dim
    PolyUniformEtaV rho nonce = [PolyUniformEta rho (nonce + j) | j <- [0..(dim-1)]:[dim][8]]

    PolyUniformEta : [256] -> [8] -> poly
    PolyUniformEta rho nonce = map (\x -> eta - x) (map BVtoZ (take`{n} withinEta))
                   where
                    seed = rho#nonce
                    randoms = ((join (SHA3::toBytes (take`{2*8*136} (SHA3::SHAKE256 (join (SHA3::toBytes seed))))))#zero)
                    withinEta = randomsInRangeDouble genS (2*eta) randoms

                    genS : [8] -> [2][4]
                    genS byte = [t0, t1]
                         where
                          t0 = drop`{4} (byte && 0x0F)
                          t1 = drop`{4} (byte >> 4)



    H : ([384],intPolyVec k) -> poly
    H (mu,w) = map fromInteger (SampleInBall ss samples)
      where
        w_packed = pack_w w
        randoms  = join (SHA3::toBytes (take`{4352} (SHA3::SHAKE256 (join (SHA3::toBytes (mu#w_packed))))))
        ss       = take`{60} randoms

        extByte : [8] -> [8]
        extByte x = x

        samples : [60][8]
        samples = take`{60} (randomsInRanges extByte [196..255] (drop`{64} randoms#zero))


    SampleInBall : [60] -> [60][8] -> [256]Integer
    SampleInBall signs jsamples = ys ! 0
                  where
                  ys = [ zero:[256]Integer ]
                        # [ if i==j then update y i ((-1:Integer)^^(toInteger [s]))
                            else updates y [j,i] [(-1:Integer)^^(toInteger [s]),y@j] | i <- [196..255]
                                                                      | j <- jsamples
                                                                      | s <- signs
                                                                      | y <- ys
                          ]


    ExpandMask : ([256], [384], Integer) -> polyVec l
    ExpandMask  (K, mu, kappa) = [samplePoly K mu kappa i `l | i <- [0..(l-1)] ]


    samplePoly : [256] -> [384] -> Integer -> Integer -> Integer -> poly
    samplePoly K mu kappa i dim = [fromInteger (`q + gamma1 - 1 - (toInteger vj)) | vj <- coeffs]
                where
                upper      = fromInteger (2*gamma1-2) : [20]
                kappaBytes = join (reverse (split (fromInteger (dim*kappa+i):[16]):[2][8])) // LEB order
                s          = join (SHA3::toBytes (take`{5*8*136} (SHA3::SHAKE256 (join (SHA3::toBytes (K#mu#kappaBytes))))))
                coeffs     = take`{n} (randomsInRangeDouble extractPolyElt upper (s#zero))


    extractPolyElt : [40] -> [2][20]
    extractPolyElt bits = [int1, int2]
                    where
                    [b0,b1,b2,b3,b4] = [(zero#b):[20] | b <- split bits : [5][8]]
                    int1 = b2'*2^^16 + b1*2^^8 +  b0
                    int2 = b4*2^^12 + b3*2^^4 +  b2''
                    b2'  = b2 && 15
                    b2'' = b2/(16:[20])

    // seed should be in little endian byte order
    CRH : {b} (fin b, b>=1) => [b*8] -> [384]
    CRH seed = join (SHA3::toBytes (take`{48*8} (SHA3::SHAKE256 (join (SHA3::toBytes seed)))))


    ExpandA : [256] -> [k][l]nttPoly 
    ExpandA rho = [ [elt i j | j <- [0..(l-1)] ] |  i <- [0..(k-1)] ]
            where
              elt i j = matrixPoly rho i j


    matrixPoly : [256] -> [width k] -> [width l] -> nttPoly
    matrixPoly rho i j = take`{n} [ BVtoZ elt | elt <- randomElts ]
                where
                randomElts = randomsInRange extractMatElt ((>=) (`q)) (s#zero)
                s          = join (SHA3::toBytes (take`{6720} (SHA3::SHAKE128 (join (SHA3::toBytes (rho#b))))))
                b          = 16*(zero#j:[8])+(zero#i:[8])


    extractMatElt : [24] -> [24]
    extractMatElt rands = zero#(2^^16 * b2' + 2^^8 * b1 + b0):[24]
                    where
                      [b0, b1, b2] = [(zero#b):[23] | b <- split`{3} rands]
                      b2' = (2^^23-1) && b2 // Typo in paper; following C implementation


    /*

      Supporting Algorithms; see Figure 3

    */

    Power2Round : Integer -> (Integer,Integer) -> (Integer,Integer)
    Power2Round q (r,d') = ((r'-r0)/2^^d',r0)
                where r' = r % q
                      r0 = centered_mod r' (2^^d')

    Power2RoundV : {dim} (fin dim, dim >= 1) => polyVec dim -> ([dim]intPoly,[dim]intPoly)
    Power2RoundV v = unzip (map polyPower2Round v)
                  where
                  polyPower2Round p = unzip [ Power2Round `q ( (fromZ r ) ,d)
                                            | r <- p
                                            ]

    Decompose : Integer -> (Integer,Integer) -> (Integer,Integer)
    Decompose q (r,a) = if (r' - r0) == (q - 1) then (0, r0 - 1)
                        else ((r' - r0) / a, r0)
              where r' = r % q
                    r0 = centered_mod r' a

    DecomposeV : (polyVec k , Integer) -> (intPolyVec k, intPolyVec k)
    DecomposeV (r,a) = unzip [ DecomposePoly p | p <- r ]
                where
                DecomposePoly p = unzip [Decompose `q (fromZ x,a) | x <- p]

    HighBits : Integer -> (Integer,Integer) -> Integer
    HighBits q (r,a) = (Decompose q (r,a)).0

    HighBitsV : (polyVec k , Integer) -> intPolyVec k
    HighBitsV (r,a) = r1
              where
                (r1,r0) = DecomposeV (r,a)


    LowBits : Integer -> (Integer,Integer) -> Integer
    LowBits q (r,a) = (Decompose q (r,a)).1


    MakeHint : Integer -> (Integer,Integer,Integer) -> Bit
    MakeHint q (z,r,a) = r1 != v1
              where r1 = HighBits q (r,a)
                    v1 = HighBits q (r + z,a)

    MakeHintV : (polyVec k, polyVec k, Integer) -> [k][n]
    MakeHintV (z,r,a) = [[x1 != x2 | x1 <- p1 | x2 <- p2] | p1 <- r1 | p2 <- v1]
              where
                r1 = HighBitsV (r,a)
                v1 = HighBitsV (polyVecSum z r,a)


    UseHint : Integer -> (Bit,Integer,Integer) -> Integer
    UseHint q (h,r,a) = if h then r1' else r1
            where
              m        = (q - 1) / a
              (r1, r0) = Decompose q (r, a)
              r1'      = if r0 > 0 then (r1 + 1) % m else (r1 - 1) % m


    UseHintV : ([k][n], polyVec k, Integer) -> intPolyVec k
    UseHintV (hvec, rvec, a) = [polyUseHint hpoly rpoly
                                  | hpoly <- hvec
                                  | rpoly <- rvec
                                  ]
                where
                polyUseHint hpoly rpoly = [ UseHint `q (h,fromZ r,a)
                                          | h <- hpoly
                                          | r <- rpoly
                                          ]




    /*

      Utility functions

    */

    ones : {a} (fin a, a >= 1) => [a] -> Integer
    ones bv = foldl (+) 0 bva
          where
          bva = map toInteger (split bv:[_][1])

    IPVtoPV : {dim} (fin dim, dim >= 1) => intPolyVec dim -> polyVec dim
    IPVtoPV intp = map (\p -> map fromInteger p) intp


    PVtoIPV : {dim} (fin dim, dim >= 1) => polyVec dim -> intPolyVec dim
    PVtoIPV pvec = map (\p -> map fromZ p) pvec


    centered_mod : Integer -> Integer -> Integer
    centered_mod x n = if r > (n/2) then r - n
                        else r
                  where r = x % n


    randomsInRange : {a} (fin a) => ([a]-> [a]) -> ([a] -> Bit) -> [inf] -> [inf][a]
    randomsInRange createElt upperCrit randoms = if (upperCrit elt )
                                    then  [ elt ]#(randomsInRange createElt upperCrit randomTail)
                                    else randomsInRange createElt upperCrit randomTail
                                    where
                                    elt        = createElt (take`{a} randoms) 
                                    randomTail = drop`{a} randoms

    randomsInRanges : {a,m} (fin a,fin m, m>=1) => ([a]-> [a]) -> [m][a] -> [inf] -> [inf][a]
    randomsInRanges createElt uppers randoms =
                    if elt <= head uppers
                    then  [ elt ]#(randomsInRanges createElt uppersRotate randomTail)
                    else randomsInRanges createElt uppers randomTail
                    where
                      elt          = createElt (take`{a} randoms) 
                      randomTail   = drop`{a} randoms
                      uppersRotate = uppers <<< 1

    randomsInRangeDouble : {a} (fin a) => ([2*a]-> [2][a]) -> [a] -> [inf] -> [inf][a]
    randomsInRangeDouble createElt upper randoms =
                    if (elts@0 <= upper) /\ (elts@1 <= upper)
                    then  elts#(randomsInRangeDouble createElt upper randomTail)
                    else
                      if (elts@0 <= upper)
                      then [ elts@0 ]#(randomsInRangeDouble createElt upper randomTail)
                      else
                        if (elts@1 <= upper)
                        then [ elts@1 ]#(randomsInRangeDouble createElt upper randomTail)
                        else randomsInRangeDouble createElt upper randomTail
                    where
                      elts       = createElt (take`{2*a} randoms) 
                      randomTail = drop`{2*a} randoms


    /*

      Supporting polynomial and polynomial vector functions

    */

    ntt : poly -> nttPoly
    ntt p = nttp
         where
          r k = rootOfUnity^^k
          exponents = join [ [BVtoZ`{q} i, (256+(BVtoZ`{q} i))] | i <- [reverse ((128+i) : [8]) | i <- [0..127] ] ]
          nttp = [ sum [ p@idx * (r k)^^(i) | idx<-[0..(n-1)]:[n][width n] | i<-[0..(n-1)]:[n](Z q)]
                 | k <- exponents 
                 ]

    nttinv : nttPoly -> poly
    nttinv p' = p
           where
            pu = reorder p'
            r' i = rootOfUnityInv^^(i*2)
            p = [ninv*(rootOfUnityInv^^i) * sum [pu@jdx * (r' ((i*j)))
                                                    | jdx<-[0..(n-1)]:[n][width n]
                                                    | j<-[0..(n-1)]:[n](Z q)
                                                    ]
                | i <- [0..255]
                ]

    // Dilithium uses a non-standard ordering of elements in the NTT domain; this function reorders the elements.
    reorder : nttPoly -> nttPoly
    reorder a = join [ [a1 @ i, a2 @ i] | i <- [0..127]:[_][8] ]
            where
              a1 = a @@ [ (i-1)/2 | i <- [reverse ((128+i) : [8]) | i <- [0..127] ] ]
              a2 = reverse (a @@ [ (511 - (zero#i):[9])/2 | i <- [reverse ((128+i) : [8]) | i <- [0..127] ] ])



    // Operations on NTT polynomials

    nttMatMul : {dim1,dim2} (fin dim1,fin dim2) => nttMat dim1 dim2 -> nttVec dim2 -> nttVec dim1
    nttMatMul mat vec = [ nttDotProduct v vec | v <- mat ]

    nttDotProduct : {dim} (fin dim) => nttVec dim -> nttVec dim -> nttPoly
    nttDotProduct v1 v2 = foldl padd (zero:nttPoly) [ nttPolyMult p1 p2 | p1 <- v1 | p2 <- v2 ]

    nttPolyMult : nttPoly -> nttPoly -> nttPoly
    nttPolyMult p1 p2 = [ x * y | x <- p1 | y <- p2]

    nttVecConstMul : {dim} (fin dim) => nttPoly -> nttVec dim -> nttVec dim
    nttVecConstMul c v = map (nttPolyMult c) v

    polyVecSum :  {dim} (fin dim) => polyVec dim -> polyVec dim -> polyVec dim
    polyVecSum v1 v2 = map nttinv (paddV v1' v2')
                where
                v1' = map ntt v1
                v2' = map ntt v2

    // Polynomial addition and subtraction
    padd : [n](Z q) -> [n](Z q) -> [n](Z q)
    padd p1 p2 = [ x + y | x <- p1 | y <- p2 ]


    psub : [n](Z q) -> [n](Z q) -> [n](Z q)
    psub p1 p2 = [ x - y | x <- p1 | y <- p2 ]


    psubV : {dim} (fin dim) => [dim][n](Z q) -> [dim][n](Z q) -> [dim][n](Z q)
    psubV v1 v2 = zipWith psub v1 v2


    paddV : {dim} (fin dim) => [dim][n](Z q) -> [dim][n](Z q) -> [dim][n](Z q)
    paddV v1 v2 = zipWith padd v1 v2



    // Aux functions

    infNorm : Integer -> Integer
    infNorm x = abs (centered_mod x `q)

    infNormPoly : intPoly -> Integer
    infNormPoly p = foldl max 0 p_centered
                where
                  p_centered = map infNorm p

    infNormPolyVec : {dim} (fin dim, dim>=1) => intPolyVec dim -> Integer
    infNormPolyVec v = foldl max 0 (map infNormPoly v)



// Known Answer Test
test_key_gen = (pk.rho#(pack_t1 pk.t1) == known_pk) /\
                ((sk.rho#sk.K#sk.tr#(pack_polyeta sk.s1)#(pack_polyeta sk.s2)#(pack_t0 sk.t0)) == known_sk)
                where
                  seed     = 0x7c9935a0b07694aa0c6d10e4db6b1add2fd81a25ccb148032dcd739936737f2d
                  (pk, sk) = Gen seed
                  known_pk = 0x1C0EE1111B08003F28E65E8B3BDEB037CF8F221DFCDAF5950EDB38D506D85BEF182A0D9D33B2C15D338F5469C4F398F307AE152620B9DC7501848B92E31A377687A65F889170145D0917E77D13B591FBF3654BEF7D0673E685A0D56098A0519346CA6A0E53D484EA6842AEBBBE6CACBAEA6FA630C3C07231E8D0028A0096F0082B5D5E1C1A3E1028C43355931D164774D4E21007ED3B0492038AFF7E20D10D4F1BC384E9755AD2871CE09E34E7C399BE5302A7BE92CD49EDBD819A005D4E2C91245EC894D1A41AB3E91E842D66AB52A96245B7C5E6E812E1C2CCAC4232AE0E8D708501375A5B5E83F1C9A3DC01AD85C452F5A92199128A3B141BEAFC2763E538378CA9230837D6E841952B3CF4951027558E637D7FAA7CBAF0A303BE2D2BF7D080651A62AEBCF2BB8C8D30F0B25C93AB6FCD6E6A4D9072CEA7F81832B6524035917E0B8F5105BE5E67DC4A034A0EDFEF43649E31D971107F368496B171BEF23D77A78AD6CC5F30580E6D94AD83702324242210790CD3FAC1C8C5525C669FDF29D5D23D0C5C4F885A6DA91075494AE71CA5716941F0DC804DC45FAF3278364718992548F271D31E5A35833E990E99472266BF93D688ECDF872895939F77A34BCC31B5EEB4C93518D70FB7679C5FBE6F324E7F6BEB3E09EB0FF21573C9667AC553FF16A68371B56522822E3A21AADD1161FEC15CFF99DB1CF5ACB1AA7EA9D30746DB08D7B0106EE40305CB95242AB183BF07C165FE6DFEECF0037BD7FD2135603E65646EBFA637D5925B694319BD32F030C05EFAC194D07B1566B374BA521451FE49BE95759C2FB1F0824179AA056E8CE84487C473FB5878747AB43F128A054E1141D35FCC10F4D84C7C578FC76BDD9177DE1381229E1443E776CE12ED6120E5840A527583D714E804DF9190AF3E34B150D7A9CBF3C0951C5815E304EF0C26B8F20E10BF10E0BFB6F7D5B3071D99B2E605873BFC07879143A3DDAE71D1EC1D376CBE681F68A406C79BEEFBC0B9B7AEFEBABED989D3D1EEE3F4A53EA40D6C592C9FFE93C51D87831EF62C845651B62F845F334BF27E9983699C6592920A54CB791A4BE4ED7AEEB44969F0ABA89CABB000AC351AC76D56936A962F69C8F94BEF08CFF046A158E7D72E44839AC06299C16E40AA193936D87CF4BB45B469CAE3419501FBD5E77BC27625A795BED41AEECE51AF52CC25489244667455CA6342F4183A42BC765D9F022E321572BC6DFF0DD97EFE0AA200487D4CDF33DD3FB1B9D11078C053AD6743BCDC8A5DA7BEB3347D04DEF1924EC3B6B6F0F2EC9526508F0FF40F9088273E3F2966299A036F458A4AF8CDBEDF76B2A7D95C9BFA6C6F3A95173AF6F614C29744B36B77EB7974FB2851F152A026AED8118389028F1CDD290FF4EBC7C353281334F1F1775EA378B0E4558101278770379A9F56FBAB72763DA834BECBC4EF40B1C9598349F62F1B01264B6F15E505C5A1C752930033BDCFD7A6F87F5B29F20B2FFE82E0FFF37CF3E080E98BD1F9F0FB65A4B7EDE91C0074617E3F7E953089E870CCECC50D8D1D324E92A694341DE2EE3DBA2B77FE738D7527995C443A6FE6074FAC1385669F028198F5961E850635304F367EB84DEA61BB8551E97087AF01F25FF210AEB5B66EB5A1B46954C61F422207641CC0388AFED76F8BC7D56DFFCD4AB4346799CF814B1048078B80DA13BBAA8A4A58A54CFA01B3919DAF2323B910D47C98C034F1549BAA84A863BB264064EC89588035D23B9115DAF89BC14848EB31E7F45F88206F3CADF5AC06B51434B6D52223E476582AB64FDF4D61279BD5D395B714458C0CE18B477DCD091DABB801D8C0D4E70790651E32A5BE72884AC31861F638575537C72579A9E1366F947CB0A3B2D8D375A0AF450F8E60CAF38742C764AB6BFC51A09A089F78FA1D2E1566104FDAC66E0F20C19CA883342809BC09C21E33DD8CAE9FEA32A8A508E25AD3554575645378F0757482875EE55F82B275B163651E5A45A8E3AE0BFDBC176AA664495182FB829143362359F32609A8265B294FF62E541442921972E556DE26AC02153F04A1D7974DC649B54BB0A888EAC2
                  known_sk = 0x

