/**
 * ML-DSA (CRYSTALS-Dilithium) signature scheme.
 *
 * This provides an algorithm for digital signatures with non-repudiation,
 * designed to be secure against an adversary with a large-scale quantum
 * computer.
 *
 * This executable specification matches the final version of [FIPS-204].
 *
 * References:
 * [FIPS-204]: National Institute of Standards and Technology. Module-Lattice-
 *     Based Digital Signature Standard. (Department of Commerce, Washington,
 *     D.C.), Federal Information Processing Standards Publication (FIPS) NIST
 *     FIPS 204. August 2024.
 *     @see https://doi.org/10.6028/NIST.FIPS.204
 *
 * @copyright Galois Inc
 * @author Marcella Hastings <marcella@galois.com>
 */
module Primitive::Asymmetric::Signature::ML_DSA::Specification where

import Primitive::Keyless::Hash::SHAKE::SHAKE128 as SHAKE128
import Primitive::Keyless::Hash::SHAKE::SHAKE256 as SHAKE256

type Byte = [8]

/**
 * Ring defined as the product of 256 elements in `Z q`, used for NTT.
 * [FIPS-204] Section 2.3 and Section 2.4.1.
 */
type Tq = [256](Z q)

/**
 * Ring of single-variable polynomials over the integers mod `X^256 + 1`.
 * [FIPS-204] Section 2.3 and Section 2.4.1.
 *
 * The `i`th element of this list represents the coefficient for the degree-`i`
 * term.
 */
type R = [256]Integer

/**
 * The ring of single-variable polynomials over the integers mod 2, modulo
 * `X^256 + 1`.
 * [FIPS-204] Section 2.3 and Section 2.4.1.
 *
 * We represent individual elements in `ℤ_2` as bits, so this is just a bit
 * array.
 */
type R2 = [256]

/**
 * The ring of single-variable polynomials over the integers mod `q`, modulo
 * `X^256 + 1`.
 * [FIPS-204] Section 2.3 and Section 2.4.1.
 */
type Rq = [256](Z q)

/**
 * Compute the centered-mod function (denoted `mod±` in the spec).
 * [FIPS-204] Section 2.3, "mod±".
 */
modPlusMinus : {α} (fin α) => Z q -> Integer
modPlusMinus m = m' where
    m_int = (fromZ m) % `α
    m' = if m_int > (`α / 2) then m_int - `α
        else m_int

/**
 * The `mod±` function satisfies the functionality described in the spec.
 * [FIPS-204] Section 2.3, "mod±".
 *
 * The lower bound computes `−⌈𝛼/2⌉` by simplifying the ceiling division
 * equation `⌈a / b⌉ = (a + b - 1) / b`.
 *
 * The parameters chosen here are all the values of `α` used in the spec.
 * ```repl
 * :prove modPlusMinusWorks`{2^^d}
 * :prove modPlusMinusWorks`{q}
 * :prove modPlusMinusWorks`{2 * γ2}
 * ```
 */
modPlusMinusWorks : {α} (fin α) => Z q -> Bit
property modPlusMinusWorks m = inRange && congruent where
    m' = modPlusMinus`{α} m
    lower_bound = - ((`α + 1) / 2)
    inRange = (lower_bound < m') && (m' <= (`α / 2))
    congruent = ((fromZ m) % `α) == (m' % `α)

/**
 * Wrapper function around SHAKE256, specifying the length `l` in bytes.
 * [FIPS-204] Section 3.7.
 *
 * The spec also defines a 3-part API for interacting with `H` (`Init`,
 * `Absorb`, `Squeeze`); we simulate this by generating an infinite output
 * and lazily taking things from it for each call to `Squeeze`, as described
 * in the same section.
 */
H : {l, m} (fin m) => [m][8] -> [l][8]
H str = SHAKE256::xofBytes`{8 * l} str

/**
 * Wrapper function around SHAKE128, specifying the length `l` in bytes.
 * [FIPS-204] Section 3.7.
 *
 * The spec also defines a 3-part API for interacting with `G` (`Init`,
 * `Absorb`, `Squeeze`); we simulate this by generating an infinite output
 * and lazily taking things from it for each call to `Squeeze`, as described
 * in the same section.
 */
G : {l, m} (fin m) => [m][8] -> [l][8]
G str = SHAKE128::xofBytes`{8 * l} str

parameter
    /**
     * Modulus defining the ring used throughout the protocol.
     * [FIPS-204] Section 4, Table 1.
     */
    type q = 8380417

    /**
     * Hamming weight of the mask sampled in signing.
     *
     * The spec describes this as "number of ±1s in polynomial `c`", where `c`
     * is the verifier's challenge.
     * [FIPS-204] Section 4, Table 1.
     *
     * The type constraint is drawn from [FIPS-204] Section 7.3, Algorithm 29.
     */
    type τ : #
    type constraint (τ <= 64)

    /**
     * Collision strength of the commitment hash `c~` component of a signature.
     * [FIPS-204] Section 4, Table 1.
     */
    type λ : #

    /**
     * Coefficient range of the commitment mask `y` used in signing.
     * [FIPS-204] Section 4, Table 1.
     *
     * The type constraint, which claims that γ1 must be a power of 2, is drawn
     * from [FIPS-203] Section 7.2, Algorithm 27.
     */
    type γ1 : #
    type constraint (2 ^^ (lg2 γ1) == γ1)

    /**
     * Low-order rounding range; this defines how to round the signer's
     * commitment `w`.
     * [FIPS-204] Section 4, Table 1.
     *
     * The type constraint is drawn from [FIPS-204] Section 7.4. The primary
     * constraint we wish to encode is that `2 * γ2` divides `q - 1`;
     * to express this, we must also require that γ2 is non-zero.
     */
    type γ2 : #
    type constraint (γ2 > 0, (q - 1) % (2 * γ2) == 0)

    /**
     * Dimensions of the matrix `A`, which is part of the public key.
     * [FIPS-204] Section 4, Table 1.
     */
    type k : #
    type ell : #
    type constraint (fin k, fin ell, k > 0)

    /**
     * Private key range; the private key is a polynomial whose coefficients
     * are all in a range defined by η.
     * [FIPS-204] Section 4, Table 1.
     *
     * The type constraint (that η must be in the set {2, 4}) is drawn from
     * [FIPS-204] Section 7.1, Algorithm 15.
     */
    type η : #
    type constraint (η % 2 == 0, 2 <= η, η <= 4)

    /**
     * Maximum Hamming weight for the hint component of a signature.
     * [FIPS-204] Section 4, Table 1.
     *
     * The constraints are drawn from [FIPS-204] Algorithm 21:
     * - `ω > 0`: in Step 16, we have to be able to compute `ω - 1`.
     * - `width ω <= 8`: This is an implementation artifact from Step 4. We
     *   compare `ω` to an element in `y`, which is a byte. Cryptol will
     *   default to fitting `ω` into in a byte. This is always true with the
     *   allowable parameter sets. If a new parameter set is released with a
     *   much larger `ω`, we can modify the implementation to remove this
     *   constraint without affecting functionality.
     */
    type ω : #
    type constraint (fin ω, ω > 0, width ω <= 8)

/**
 * A 512th root of unity in `Z_q`.
 * [FIPS-204] Section 4, Table 1.
 */
type ζ = 1753

/**
 * Number of dropped bits from `t` (this compresses the public key for
 * a performance optimization).
 * [FIPS-204] Section 4, Table 1.
 */
type d = 13

/**
 * Allowable error range for signature components. In signing, this is used to
 * determine if a candidate signature is valid.
 * [FIPS-204] Section 4, Table 1.
 */
type β = η * τ

/**
 * Compute a base-2 representation of the input mod `2^α` using little-endian
 * order.
 * [FIPS-204] Section 7.1, Algorithm 9.
 */
IntegerToBits : {α} (fin α, α > 0) => Integer -> [α]
IntegerToBits x = y' where
    // Step 3. Compute the value of each `y_i`.
    y = [x' % 2 | x' <- xs' | i <- [0..α - 1]]

    // Step 4. Compute value of `x'` at each iteration of the loop.
    // In Cryptol, integer division takes the floor by default.
    xs' = [x] # [x' / 2 | x' <- xs']

    // Cryptol-specific conversion: convert each Integer-typed bit to an actual
    // bit and join into a single vector.
    y' = join [(fromInteger yi) : [1] | yi <- y]

/**
 * Compute the integer value expressed by a bit string using little-endian
 * order.
 * [FIPS-204] Section 7.1, Algorithm 10.
 */
BitsToInteger : {α} (fin α, α > 0) => [α] -> Integer
BitsToInteger y = xs ! 0 where
    // Cryptol-specific conversion: separate the input into α 1-bit vectors,
    // then convert each to an integer.
    y' = map toInteger (split`{α} y)

    // Steps 1 - 4. Compute the value of `x` at each iteration of the loop.
    xs = [0] # [2 * x + y' @ (`α - i)
        | x <- xs
        | i <- [1..α]]

/**
 * The integer / bit conversion functions must invert each other.
 * This is not explicit in the spec, but we define the property anyway.
 * The parameter choices are approximately the same as some of the use cases
 * in the spec.
 * ```repl
 * :check BitsToIntegersInverts`{44}
 * :exhaust BitsToIntegersInverts`{10}
 * ```
 */
BitsToIntegersInverts : {α} (fin α, α > 0) => [α] -> Bit
property BitsToIntegersInverts x = IntegerToBits (BitsToInteger x) == x

/**
 * Compute a base-256 representation of `x mod 256^α` using little-endian byte
 * order.
 * [FIPS-204] Section 7.1, Algorithm 11.
 */
IntegerToBytes : {α} (fin α, α > 0) => Integer -> [α]Byte
IntegerToBytes x = y where
    // Step 2 - 3.
    y = [fromInteger (x' % 256) | x' <- xs' | i <- [0..α - 1]]

    // Step 4. Compute the value of `x'` at each iteration of the loop.
    xs' = [x] # [x' / 256 | x' <- xs']

/**
 * Convert a bit string into a byte string using little-endian order.
 * [FIPS-204] Section 7.1, Algorithm 12.
 */
BitsToBytes : {α} (fin α) => [α]Bit -> [α /^ 8]Byte
BitsToBytes y
    // A zero-length input will produce a zero-length output.
    | α == 0 => zero
    | α > 0 => z where
        // Compute the values of `y[i]` and `i` at each iteration of the loop.
        // To simplify the next step, this also:
        // - Groups the `y[i]` bits into sets of 8 for each `z[⌊i / 8⌋]`, and
        // - Pads each bit of `y[i]` into a byte to support subsequent operations.
        y' = groupBy`{8} ([(zext [yi], i)
            | yi <- y
            | i <- [0..α - 1]] # zero)

        // Steps 2 - 4. We compute the `y` terms separately then `sum` them
        // for each byte in `z`.
        z = [sum [yi * (2 ^^ (i % 8))
                | (yi, i) <- yi8]
            | yi8 <- y']

/**
 * Convert a byte string into a bit string using little-endian order.
 * [FIPS-204] Section 7.1, Algorithm 13.
 */
BytesToBits : {α} (fin α) => [α]Byte -> [8 * α]Bit
BytesToBits z
    | α == 0 => []
    | α > 0 => join [[ y8ij where
            // Step 4. Taking the last bit is the same as modding by 2. (See
            // `mod2IsFinalBit`).
            y8ij = zi' ! 0
            // Step 5. Shifting right is the same as the iterative
            // division (see `div2IsShiftR`). This accounts for all the
            // divisions "up to this point" (e.g. none when `j = 0`), which
            // is why we use `zi'` to evaluate `y8ij` above.
            zi' = zi >> j
        // Step 3.
        | j <- [0..7]]
        // Step 2. We iterate over `z` directly instead of indexing into it.
        | zi <- z ]

private
    /**
     * The iterative division by 2 in `BytesToBits` is the same as shifting
     * right.
     * ```repl
     * :prove div2IsShiftR
     * ```
     */
    div2IsShiftR : Byte -> Bit
    div2IsShiftR C = take (d2 C) == shl where
        // Note: division here is floor'd by default.
        d2 c = [c] # d2 (c / 2)
        shl = [C >> j | j <- [0..7]]

/**
 * The conversions between bits and bytes are each others' inverses, for
 * lengths that are a multiple of 8.
 * This isn't explicit in the spec, but we include the property anyway.
 * ```repl
 * :prove B2B2BInverts`{320}
 * :prove B2B2BInverts`{32 * 44}
 * ```
 */
B2B2BInverts : {α} (fin α) => [8 * α] -> Bit
property B2B2BInverts y = BytesToBits (BitsToBytes y) == y

/**
 * Generate an element in the integers mod `q` or a failure indicator.
 * [FIPS-204] Section 7.1, Algorithm 14.
 */
CoeffFromThreeBytes : Byte -> Byte -> Byte -> Option (Z q)
CoeffFromThreeBytes b0 b1 b2 = maybe_z where
    // Steps 1 - 4.
    b2' = if b2 > 127 then b2 - 128 else b2

    // We have to explicitly expand the byte strings to support the
    // operations in the next step. 32 bits gives us plenty of space.
    [bq0, bq1, bq2'] = map zext`{32} [b0, b1, b2']

    // Step 5.
    z = 2^^16 * bq2' + 2^^8 * bq1 + bq0

    // Step 6 - 7. We have to convert `z` into `Z q` manually in the successful
    // case -- note that we can't do it sooner because otherwise the condition
    // is moot.
    maybe_z = if z < `q then Some (toZ z) else None

    toZ : [32] -> Z q
    toZ b = fromInteger (toInteger b)

/**
 * Generate an element of {-η, -η + 1, ..., η} or a failure indicator.
 * [FIPS-204] Section 7.1, Algorithm 15.
 */
CoeffFromHalfByte : [4] -> Option Integer
CoeffFromHalfByte b =
    if (`η == 2) && (b < 15) then Some (2 - (toInteger b % 5))
    else
        if (`η == 4) && (b < 9) then Some (4 - toInteger b)
        else None

/**
 * Encode a polynomial vector `h` with binary coefficients into a byte string.
 * [FIPS-204] Section 7.1, Algorithm 20.
 */
HintBitPack : [k]R2 -> [ω + k]Byte
HintBitPack h = yFinal where
    // Step 1.
    y0 = zero : [ω + k]Byte
    // Step 2.
    Index0 = 0
    // Steps 3 - 11. This builds a list with all the intermediate values of
    // `y` and `Index`...
    yAndIndex = [(y0, Index0)] # [ (y'', Index') where
            // Steps 5 - 8.
            (y', Index') = if (h @i @j) != 0 then
                    (update y Index j, Index + 1)
                else (y, Index)

            // Step 10.
            y'' = if j == 255 then
                    update y' (`ω + i) Index'
                else y'
        | (y, Index) <- yAndIndex
        // Step 3 - 4.
        | i <- [0..k-1], j <- [0..255]
    ]
    // Step 12. ...we return the last `y`.
    (yFinal, _) = yAndIndex ! 0

/**
 * Reverses the procedure `HintBitPack`.
 * [FIPS-204] Section 7.1, Algorithm 21.
 *
 * This diverges slightly from the spec:
 * - To simplify updating `h`, we treat it as a single array of size `256k`.
 *   We separate it into the correct `[k]R2` representation in the final step.
 *   We access the array in "the natural way" -- that is, in Step 12, the
 *   element `h[i]_y[Index]` is at index `i * 256 + y[Index]` in our array.
 * - We cannot "return early" when we encounter an error case. Instead, we use
 *   options to indicate whether a failure has occurred and skip further
 *   computation when the option is `None`.
 * - The for loop in Step 3 is executed with a list comprehension. The while
 *   loop in Step 7 is executed with recursion. The for loop in Step 16 is
 *   executed with recursion.
 */
HintBitUnpack : [ω + k]Byte -> Option ([k]R2)
HintBitUnpack y = hFinal where
    // Step 1.
    h0 = zero : [k * 256]
    // Step 2.
    Index0 = 0

    // Step 3. Construct a list comprising the values of `h` and `Index`
    // at the end of each iteration of the loop in Steps 3 - 15.
    hAndIndexes = [Some (h0, Index0)] # [
            // Call Steps 4-5 if we haven't encountered an error yet.
            case maybe_hAndIndex of
                Some hAndIndex -> Step4_5 hAndIndex i
                None -> None
        | maybe_hAndIndex <- hAndIndexes
        | i <- [0..k-1]
    ]

    // Steps 4 - 5.
    Step4_5 (h, Index) i = if (y@(`ω + i) < Index) || (y@(`ω + i) > `ω) then
            None
        else Step6_15 (h, Index) i

    // Steps 6 - 15.
    Step6_15 (h, Index) i = Step7_14 (h, Index) where
        // Step 6.
        First = Index

        // Steps 7 - 14.
        Step7_14 (h', Index') =
            // Step 7 (condition).
            if Index' < (y@(`ω + i)) then
                // Step 8 - 11.
                // The `/\` is a short-cutting `and`, equivalent to the nested
                // `if` statements in the spec.
                if ((Index' > First) /\ (y@(Index' - 1) >= y@Index')) then None
                // Step 7 (recursive call -- equivalent to continuing the loop).
                else Step7_14
                    // Step 12.
                    (update h' (i*256 + (toInteger (y@Index'))) 1,
                    // Step 13.
                    Index' + 1)
            // If the loop condition is no longer true, return the current
            // values of `h` and `Index`.
            else Some (h', Index')

    // Get the values of `h` and `Index` after the loop in Steps 3 - 15.
    maybe_hAndIndex' = hAndIndexes ! 0

    // Step 16 - 20.
    hFinal = case maybe_hAndIndex' of
        Some hAndIndex -> if checkLeftoverBytes then
                // This `split` converts back to the spec-adherent
                // representation of `h`.
                Some (split`{k} h)
            else None
            where
                (h, Index) = hAndIndex
                // This helper reads any "leftover" bytes (e.g. beyond `Index`)
                // in the first `ω` bytes of `y`; it returns `True` if all of
                // them are zero.
                checkLeftoverBytes = and [i >= Index ==> y@i == 0
                    | i <- [0..ω - 1]]

        None -> None

/**
 * Verify that `HintBitUnpack` is the reverse of `HintBitPack`.
 *
 * This takes a list of indexes indicating the non-zero elements and constructs
 * a valid, sparse `h` -- rejection sampling is not a valid option because
 * sparse-enough `h`s were too rare.
 *
 * We test the case where we have the maximum number of 1s, a medium number, and
 * a case where at least one vector should have no non-zero terms at all.
 * In practice, the hint may fall anywhere in this range.
 * ```repl
 * :check HintPackingInverts`{ω}
 * :check HintPackingInverts`{ω / 2}
 * :check HintPackingInverts`{3}
 * ```
 *
 * Note that this does not test the error cases for `HintBitUnpack`.
 */
HintPackingInverts : {w} (w <= ω) => [w][lg2 (256 * k)] -> Bit
property HintPackingInverts h_Indexes =
    case HintBitUnpack (HintBitPack h) of
        Some h' -> h == h'
        None -> False
    where
        // Build `h` out of `h_indexes`:
        h = split`{k} [if elem idx h_Indexes then 1 else 0 | idx <- [0..(256 * k) - 1]]

/**
 * Sample a polynomial in the ring `Tq`.
 * [FIPS-204] Section 7.3, Algorithm 30.
 */
RejNTTPoly : [32]Byte -> Tq
RejNTTPoly ρ = a_hat where
    // Step 2 - 3.
    ctx0 = G ρ

    // Step 4, 11. The `take` here replaces the loop condition.
    a_hat = take`{256} (sample ctx0)

    sample : [inf][8] -> [inf](Z q)
    sample GSqueeze = a_hat' where
        // Step 5. This pops the first 3 bytes off the pseudorandom stream.
        (s, ctx) = splitAt`{3} GSqueeze

        // Step 6.
        a_hat_j = CoeffFromThreeBytes (s@0) (s@1) (s@2)

        // Step 7 - 9. The recursive call here replaces the `while` loop.
        a_hat' = case a_hat_j of
            Some aj -> [aj] # (sample ctx)
            // In the spec, the sample `a_hat_j` is always added to the list,
            // and `j` is only increased if the sample was not rejected (so a
            // rejected value is overwritten in the next iteration). Here,
            // we only add `a_hat_j` if it's valid.
            None -> sample ctx

/**
 * Sample an element in `R` with coefficients in the range [-η, η].
 * [FIPS-204] Section 7.3, Algorithm 31.
 */
RejBoundedPoly: [66]Byte -> R
RejBoundedPoly ρ = a where
    // Steps 2 - 3.
    ctx0 = H ρ

    // Step 4, 17. The `take` replaces the loop condition.
    a = take`{256} (sample ctx0)

    sample : [inf][8] -> [inf]Integer
    sample HSqueeze = a' where
        // Step 5. This pops one byte off the pseudorandom stream.
        ([z] # ctx) = HSqueeze

        // Step 6 - 8. We use Cryptol-native functions instead of dividing
        // and modding `z`. See `TakeAndDropAreDivAndMod` for the equivalence.
        z0 = CoeffFromHalfByte (drop`{4} z)
        z1 = CoeffFromHalfByte (take`{4} z)

        // Step 8 - 15. The recursive calls replace the `while` loop.
        // In order to make the types work, we have to mash the two conditions
        // together and make exactly one recursive call.
        a' = case z0 of
            Some z0' -> case z1 of
                Some z1' -> [z0', z1'] # (sample ctx)
                None -> [z0'] # (sample ctx)
            None -> case z1 of
                Some z1' -> [z1'] # (sample ctx)
                None -> sample ctx

/**
 * Given a byte, the `take` function is equivalent to dividing by 16, and the
 * `drop` function is equivalent to taking the value mod 16.
 *
 * We prefer the Cryptol functions because they automatically convert from a
 * byte to a 4-bit value, which we need to call `CoeffFromHalfByte`. Here, we
 * use `zext` pad the 4-bit-vector, so we can compare it to the byte.
 * ```repl
 * :prove TakeAndDropAreDivAndMod
 * ```
 */
TakeAndDropAreDivAndMod : [8] -> Bool
property TakeAndDropAreDivAndMod z = dropIsMod && takeIsDiv where
    dropIsMod = z % 16 == zext (drop`{4} z)
    // Division of bit vectors in Cryptol automatically takes the floor.
    takeIsDiv = z / 16 == zext (take`{4} z)

/**
 * Decompose a set of integers mod `q` into a pair `(r1, r0)` such that
 * `r === r1 * 2^d + r0 mod q`.
 *
 * This applies the `Power2Round` function (Algorithm 35) coefficientwise to
 * the polynomials in the vectors, per the description at the beginning of
 * [FIPS-204] Section 7.4.
 */
Power2Round : [k]Rq -> ([k]R, [k]R)
Power2Round r_vec = (r1_vec, r0_vec) where
    // [FIPS-204] Section 7.4, Algorithm 35.
    Power2Round_Single : Z q -> (Integer, Integer)
    Power2Round_Single r = (r1, r0) where
        r_plus = r
        r0 = modPlusMinus`{2^^d} r_plus
        r1 = ((fromZ r_plus) - r0) / (2^^`d)

    // Apply the function coefficientwise to every polynomial.
    zipped_r1r0 : [k][256](Integer, Integer)
    zipped_r1r0 = [map Power2Round_Single r | r <- r_vec]

    // Unzip the tuples.
    r1_vec = [[r1_j | (r1_j, _) <- ri] | ri <- zipped_r1r0]
    r0_vec = [[r0_j | (_, r0_j) <- ri] | ri <- zipped_r1r0]

private
    /**
     * Property demonstrating that `Power2Round` does what it says it's
     * supposed to do in the definition.
     * [FIPS-204] Section 7.4, comment on Algorithm 35.
     * ```repl
     * :check power2RoundSatisfiesDefinition
     * ```
     */
    power2RoundSatisfiesDefinition r_vec = validDecomp where
        (r1_vec, r0_vec)= Power2Round r_vec
        isValid (r, (r1, r0)) = (r1 * 2^^`d + r0) % `q == (fromZ r)
        validDecomp = and [ and (map isValid (zip rs (zip r1s r0s)))
            | r1s <- r1_vec
            | r0s <- r0_vec
            | rs <- r_vec]

/**
 * Decompose a set of integers mod `q` into a pair `(r1, r0)` such that
 * `r === r1 (2 γ2) + r0 mod q`.
 *
 * This applies the `Decompose` function (Algorithm 36) coefficientwise to
 * the polynomials in the vectors, per the description at the beginning of
 * [FIPS-204] Section 7.4.
 */
Decompose : [k]Rq -> ([k]R, [k]R)
Decompose r_vec = (r1_vec, r0_vec) where
    // [FIPS-204] Section 7.4, Algorithm 36.
    Decompose_Single : Z q -> (Integer, Integer)
    Decompose_Single r = (r1, r0') where
        r_plus = r
        r0 = modPlusMinus`{2 * γ2} r_plus
        (r1, r0') = if (fromZ r_plus) - r0 == `q - 1 then
                (0, r0 - 1)
            else
                (((fromZ r_plus) - r0) / (2 * `γ2), r0)

    // Apply the function coefficientwise to every polynomial.
    zipped_r1r0 : [k][256](Integer, Integer)
    zipped_r1r0 = [map Decompose_Single r | r <- r_vec]

    // Unzip the tuples.
    r1_vec = [[r1_j | (r1_j, _) <- ri] | ri <- zipped_r1r0]
    r0_vec = [[r0_j | (_, r0_j) <- ri] | ri <- zipped_r1r0]

private
    /**
     * Property demonstrating that `Decompose` does what it says it's
     * supposed to do in the definition.
     * [FIPS-204] Section 7.4, comment on Algorithm 36.
     * ```repl
     * :check decomposeSatisfiesDefinition
     * ```
     */
    decomposeSatisfiesDefinition r_vec = validDecomp where
        (r1_vec, r0_vec)= Decompose r_vec
        isValid (r, (r1, r0)) = (r1 * 2 * `γ2 + r0) % `q == (fromZ r)
        validDecomp = and [ and (map isValid (zip rs (zip r1s r0s)))
            | r1s <- r1_vec
            | r0s <- r0_vec
            | rs <- r_vec]

/**
 * Returns `r1` from the output of `Decompose`.
 * [FIPS-24] Section 7.4, Algorithm 37.
 *
 * This applies the `HighBits` function (Algorithm 37) coefficientwise to
 * the polynomials in the vectors, per the description at the beginning of
 * Section 7.4.
 */
HighBits : [k]Rq -> [k]R
HighBits r = r1 where
    (r1, _) = Decompose r

/**
 * Returns `r0` from the output of `Decompose`.
 * [FIPS-24] Section 7.4, Algorithm 38.
 *
 * This applies the `LowBits` function (Algorithm 38) coefficientwise to
 * the polynomials in the vectors, per the description at the beginning of
 * Section 7.4.
 */
LowBits : [k]Rq -> [k]R
LowBits r = r0 where
    (_, r0) = Decompose r

/**
 * Compute the hint bits indiciating whether adding `z` to `r` alters the high
 * bits of `r`.
 * [FIPS-204] Section 7.4, Algorithm 39.
 *
 * This applies the `MakeHint` function coefficientwise to the polynomials in the
 * vectors, per the description at the beginning of Section 7.4. The `HighBits`
 * function operates over vectors of polynomials; then we compare the vectors of
 * high bits coefficientwise.
 */
MakeHint : [k]Rq -> [k]Rq -> [k]R2
MakeHint z_vec r_vec = hint where
    r1_vec = HighBits r_vec
    v1_vec = HighBits (r_vec + z_vec)

    hint = [[r1 != v1
        | r1 <- r1s | v1 <- v1s]
        | r1s <- r1_vec | v1s <- v1_vec]

/**
 * Return the high bits of `r` adjusted according to hint `h`.
 * [FIPS-204] Section 7.4, Algorithm 40.
 *
 * This applies the `UseHint` function coefficientwise to the polynomials in
 * the vectors, per the description at the beginning of Section 7.4.
 */
UseHint : [k]R2 -> [k]Rq -> [k]R
UseHint h_vec r_vec = r1_vec where
    // Step 1.
    m = (`q - 1) / (2 * `γ2)
    // Step 2.
    (r1_vec, r0_vec) = Decompose r_vec

    // Steps 3 - 5. This takes the decomposed integers instead of the original
    // element in `Z q`.
    adjustHighBits r1 r0 h =
        if (h == 1) && (r0 > 0) then (r1 + 1) % m
        | (h == 1) && (r0 <= 0) then (r1 - 1) % m
        else r1

    // Apply the function coefficientwise to the decomposed polynomials.
    r1'_vec = [[adjustHighBits r1 r0 h
            | r1 <- r1s | r0 <- r0s | h <- hs]
        | r1s <- r1_vec | r0s <- r0_vec | hs <- h_vec]

private
    /**
     * The output of `UseHint` must be within the range `[0, (q-1) / (2*γ2)]`.
     * [FIPS-204] Section 7.4, comment on Algorithm 40.
     *
     * This takes about 1 minute to prove.
     * ```repl
     * :prove useHintIsInRange
     * ```
     */
    property useHintIsInRange h_vec r_vec = r1InRange where
        r1_vec = UseHint h_vec r_vec
        inRange r1 = (0 <= r1) && (r1 <= (`q - 1) / (2 * `γ2))
        // Apply check coefficientwise to the polynomial vector.
        r1InRange = and [and (map inRange r1s) | r1s <- r1_vec]
