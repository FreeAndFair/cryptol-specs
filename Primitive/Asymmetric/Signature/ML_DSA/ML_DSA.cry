/**
 * ML-DSA (CRYSTALS-Dilithium) signature scheme.
 *
 * This provides an algorithm for digital signatures with non-repudiation,
 * designed to be secure against an adversary with a large-scale quantum
 * computer.
 *
 * This module implements the ML-DSA family of external functions in [FIPS-204]
 * Section 5.
 *
 * References:
 * [FIPS-204]: National Institute of Standards and Technology. Module-Lattice-
 *     Based Digital Signature Standard. (Department of Commerce, Washington,
 *     D.C.), Federal Information Processing Standards Publication (FIPS) NIST
 *     FIPS 204. August 2024.
 *     @see https://doi.org/10.6028/NIST.FIPS.204
 */
module Primitive::Asymmetric::Signature::ML_DSA::ML_DSA where

import interface Primitive::Asymmetric::Signature::ML_DSA::Parameters as P
import Primitive::Asymmetric::Signature::ML_DSA::Specification { interface P }

/**
 * Generate a public-private key pair.
 * [FIPS-204] Section 5.1, Algorithm 1.
 *
 * This diverges from the spec: since Cryptol does not support random number
 * generation, this function takes the randomness `ξ` as a parameter. This value
 * must be generated in a cryptographic module using an approved random bit
 * generator (RBG).
 */
KeyGen : Option ([32]Byte) -> Option (PublicKey, PrivateKey)
KeyGen maybe_ξ = case maybe_ξ of
    None -> None
    Some ξ -> Some (KeyGen_internal ξ)

/**
 * Generate an ML-DSA signature.
 * [FIPS-204] Section 5.2, Algorithm 2.
 *
 * This diverges from the spec: since Cryptol does not support random number
 * generation, this function takes the randomness `rnd` as a parameter. This
 * value must be generated in a cryptographic module using an approved random
 * bit generator (RBG).
 *
 * Note: The type parameter `c` is equivalent to `|ctx|` in the spec.
 */
Sign : {m, c} (fin m, fin c) =>
    PrivateKey -> [m] -> [c]Byte -> Option ([32]Byte) -> Option (Signature)
Sign sk M ctx maybe_rnd
    // Steps 1 - 3.
    | c > 255 => None
    // Steps 5 - 8.
    | c <= 255 => case maybe_rnd of
        None -> None
        Some rnd -> sigma where
            // Step 10.
            M' = BytesToBits (IntegerToBytes`{1} 0 # IntegerToBytes`{1} `c # ctx) # M
            // Step 11.
            sigma = Some (Sign_internal sk M' rnd)

/**
 * Verify a signature for a message.
 * [FIPS-204] Section 5.3, Algorithm 3.
 */
Verify : {m, c} (fin m, fin c) =>
    PublicKey -> [m] -> Signature -> [c]Byte -> Option Bool
Verify pk M sigma ctx
    | c > 255 => None
    | c <= 255 => Some (Verify_internal pk M' sigma) where
        M' = BytesToBits (IntegerToBytes`{1} 0 # IntegerToBytes`{1} `c # ctx) # M


// We expose the internal functions for testing purposes only.
submodule TestAPI where
    import Primitive::Asymmetric::Signature::ML_DSA::Specification { interface P } as Spec

    KeyGen_internal = Spec::KeyGen_internal
    Sign_internal = Spec::Sign_internal
    Verify_internal = Spec::Verify_internal
